<?xml version="1.0" encoding="UTF-8"?>
<process
    name="ProcessOrder"
    targetNamespace="http://xml.smilecoms.com/SCA"
    xmlns:tns="http://xml.smilecoms.com/SCA"
    xmlns:BPELUtils="java://com.smilecoms.commons.bpel.BPELUtils" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:sxt="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Trace" 
    xmlns:sxed="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Editor2"
    xmlns:sxat="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Attachment"
    xmlns:sxxf="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/XPathFunctions"
    xmlns:sxeh="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/ErrorHandling" 
    xmlns:ns0="http://xml.smilecoms.com/schema/SCA" 
    xmlns:ns1="http://xml.smilecoms.com/schema/CM" 
    xmlns:ns2="http://xml.smilecoms.com/schema/BM" 
    xmlns:ns3="http://xml.smilecoms.com/SCASubFlows" 
    xmlns:ns4="http://xml.smilecoms.com/BM"
    xmlns:ns5="http://xml.smilecoms.com/CM" 
    xmlns:ns6="http://xml.smilecoms.com/schema/IM" xmlns:ns7="http://xml.smilecoms.com/schema/POS" xmlns:ns8="http://xml.smilecoms.com/schema/AM">
    <import namespace="http://xml.smilecoms.com/SCA" location="../../wsdl/SCAServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/schema/SCA" location="../../wsdl/SCASchema.xsd" importType="http://www.w3.org/2001/XMLSchema"/>
    <import namespace="http://xml.smilecoms.com/SCASubFlows" location="../../wsdl/SCASubFlows.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/CM" location="../Partners/CM/CMServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/BM" location="../Partners/BM/BMServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/IM" location="../Partners/IM/IMServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/POS" location="../Partners/POS/POSServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/AM" location="../Partners/AM/AMServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <partnerLinks>
        <partnerLink name="POS" xmlns:tns="http://xml.smilecoms.com/POS" partnerLinkType="tns:POSServiceDefinition" partnerRole="POS"/>
        <partnerLink name="IM" xmlns:tns="http://xml.smilecoms.com/IM" partnerLinkType="tns:IMServiceDefinition" partnerRole="IM"/>
        <partnerLink name="BM" xmlns:tns="http://xml.smilecoms.com/BM" partnerLinkType="tns:BMServiceDefinition" partnerRole="BM"/>
        <partnerLink name="SCASubFlows" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" partnerLinkType="tns:SCASubFlows" partnerRole="SCASubFlows"/>
        <partnerLink name="SCACalling" partnerLinkType="tns:SCA" partnerRole="SCAImplementation"/>
        <partnerLink name="AM" xmlns:tns="http://xml.smilecoms.com/AM" partnerLinkType="tns:AMServiceDefinition" partnerRole="AM"/>
        <partnerLink name="CM" xmlns:tns="http://xml.smilecoms.com/CM" partnerLinkType="tns:CMServiceDefinition" partnerRole="CM"/>
        <partnerLink name="SCA" partnerLinkType="tns:SCA" myRole="SCAImplementation"/>
    </partnerLinks>
    <variables>
        <variable name="POSGetSoldStockLocationsOut" xmlns:tns="http://xml.smilecoms.com/POS" messageType="tns:GetSoldStockLocationsResponse"/>
        <variable name="POSGetSoldStockLocationsIn" xmlns:tns="http://xml.smilecoms.com/POS" messageType="tns:GetSoldStockLocationsRequest"/>
        <variable name="CMValidateOrderOut" messageType="ns5:ValidateOrderResponse"/>
        <variable name="CMValidateOrderIn" messageType="ns5:ValidateOrderRequest"/>
        <variable name="CMUpdateProductInstanceOut" messageType="ns5:Done"/>
        <variable name="CMUpdateProductInstanceIn" messageType="ns5:UpdateProductInstanceRequest"/>
        <variable name="CMDeleteProductInstanceOut" messageType="ns5:Done"/>
        <variable name="CMDeleteProductInstanceIn" messageType="ns5:DeleteProductInstanceRequest"/>
        <variable name="CMGetProductInstancesOut" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:ProductInstancesResponse"/>
        <variable name="CMGetProductInstancesIn" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:GetProductInstancesRequest"/>
        <variable name="Dummy" type="xsd:int"/>
        <variable name="DummyString" type="xsd:string"/>
        <variable name="Counter" type="xsd:int"/>
        <variable name="SIMSaleSaleId" type="xsd:int"/>
        <variable name="CreatedByOrgId" type="xsd:int"/>
        <variable name="SIMProductInstanceId" type="xsd:int"/>
        <variable name="SIMSalePromoCode" type="xsd:string"/>
        <variable name="SIMSaleDate" type="xsd:dateTime"/>
        <variable name="Found" type="xsd:boolean"/>
        <variable name="MustVerifyPhoneNumber" type="xsd:boolean"/>
        <variable name="MustSetServicesAsTD" type="xsd:boolean"/>
        <variable name="ValidatedSIM" type="xsd:boolean"/>
        <variable name="SaleRowProvisioningData" type="xsd:string"/>
        <variable name="ValidatedPhoneNumber" type="xsd:boolean"/>
        <variable name="OriginalPublicIdentity" type="xsd:string"/>
        <variable name="PublicIdentity" type="xsd:string"/>
        <variable name="Fault1FaultVar" messageType="tns:SCAError"/>
        <variable name="DefaultAccountId" type="xs:long"/>
        <variable name="ICCID" type="xsd:string"/>
        <variable name="SCAProcessOrderOut" messageType="tns:ProcessOrderResponse"/>
        <variable name="SCAProcessOrderIn" messageType="tns:ProcessOrderRequest"/>
        <variable name="IMGetCustomersOut" xmlns:tns="http://xml.smilecoms.com/IM" messageType="tns:GetCustomersResponse"/>
        <variable name="IMGetCustomersIn" xmlns:tns="http://xml.smilecoms.com/IM" messageType="tns:GetCustomersRequest"/>
    </variables>
    <faultHandlers>
        <catch faultMessageType="ns3:SubFlowError" faultVariable="SubFlowError">
            <sequence name="Sequence10">
                <sxt:trace>
                    <sxt:log level="warning" location="onComplete">
                        <from>concat('Error in ProcessOrder BPEL flow. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc)</from>
                    </sxt:log>
                </sxt:trace>
                <compensate name="Compensate1"/>
                <assign name="AssignErr1">
                    <copy>
                        <from>$SubFlowError.SubFlowError/ErrorCode</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                    </copy>
                    <copy>
                        <from>$SubFlowError.SubFlowError/ErrorDesc</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                    </copy>
                    <copy>
                        <from>$SubFlowError.SubFlowError/ErrorType</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                    </copy>
                </assign>
                <if name="IfAsync1">
                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Async</condition>
                    <assign name="AssignAsyncError1">
                        <copy>
                            <from>BPELUtils:sendTrapToOpsManagement(concat('Error in ProcessOrder BPEL flow for an Async Request. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc))</from>
                            <to>$DummyString</to>
                        </copy>
                    </assign>
                </if>
                <reply name="ReplyErr1" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
            </sequence>
        </catch>
        <catch faultMessageType="tns:SCAError" faultVariable="SCAError">
            <sequence name="Sequence101">
                <sxt:trace>
                    <sxt:log level="warning" location="onComplete">
                        <from>concat('Error in ProcessOrder BPEL flow. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc)</from>
                    </sxt:log>
                </sxt:trace>
                <compensate name="Compensate6"/>
                <assign name="AssignErr6">
                    <copy>
                        <from>$SCAError.SCAError/ns0:ErrorDesc</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                    </copy>
                    <copy>
                        <from>$SCAError.SCAError/ns0:ErrorType</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                    </copy>
                    <copy>
                        <from>$SCAError.SCAError/ns0:ErrorCode</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                    </copy>
                </assign>
                <if name="IfAsync6">
                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Async</condition>
                    <assign name="AssignAsyncError6">
                        <copy>
                            <from>BPELUtils:sendTrapToOpsManagement(concat('Error in ProcessOrder BPEL flow for an Async Request. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc))</from>
                            <to>$DummyString</to>
                        </copy>
                    </assign>
                </if>
                <reply name="ReplyErr6" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
            </sequence>
        </catch>
        <catch xmlns:bm="http://xml.smilecoms.com/BM" faultMessageType="bm:BMError" faultVariable="BMError">
            <sequence name="Sequence11">
                <sxt:trace>
                    <sxt:log level="warning" location="onComplete">
                        <from>concat('Error in ProcessOrder BPEL flow. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc)</from>
                    </sxt:log>
                </sxt:trace>
                <compensate name="Compensate2"/>
                <assign name="AssignErr2">
                    <copy>
                        <from>$BMError.BMError/ns2:ErrorDesc</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                    </copy>
                    <copy>
                        <from>$BMError.BMError/ns2:ErrorType</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                    </copy>
                    <copy>
                        <from>$BMError.BMError/ns2:ErrorCode</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                    </copy>
                </assign>
                <if name="IfAsync2">
                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Async</condition>
                    <assign name="AssignAsyncError2">
                        <copy>
                            <from>BPELUtils:sendTrapToOpsManagement(concat('Error in ProcessOrder BPEL flow for an Async Request. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc))</from>
                            <to>$DummyString</to>
                        </copy>
                    </assign>
                </if>
                <reply name="ReplyErr2" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
            </sequence>
        </catch>
        <catch xmlns:cm="http://xml.smilecoms.com/CM" faultMessageType="cm:CMError" faultVariable="CMError">
            <sequence name="Sequence12">
                <sxt:trace>
                    <sxt:log level="warning" location="onComplete">
                        <from>concat('Error in ProcessOrder BPEL flow. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc)</from>
                    </sxt:log>
                </sxt:trace>
                <compensate name="Compensate3"/>
                <assign name="AssignErr3">
                    <copy>
                        <from>$CMError.CMError/ns1:ErrorDesc</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                    </copy>
                    <copy>
                        <from>$CMError.CMError/ns1:ErrorType</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                    </copy>
                    <copy>
                        <from>$CMError.CMError/ns1:ErrorCode</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                    </copy>
                </assign>
                <if name="IfAsync3">
                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Async</condition>
                    <assign name="AssignAsyncError3">
                        <copy>
                            <from>BPELUtils:sendTrapToOpsManagement(concat('Error in ProcessOrder BPEL flow for an Async Request. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc))</from>
                            <to>$DummyString</to>
                        </copy>
                    </assign>
                </if>
                <reply name="ReplyErr3" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
            </sequence>
        </catch>
        <catch xmlns:im="http://xml.smilecoms.com/IM" faultMessageType="im:IMError" faultVariable="IMError">
            <sequence name="Sequence121">
                <sxt:trace>
                    <sxt:log level="warning" location="onComplete">
                        <from>concat('Error in ProcessOrder BPEL flow. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc)</from>
                    </sxt:log>
                </sxt:trace>
                <compensate name="Compensate4"/>
                <assign name="AssignErr4">
                    <copy>
                        <from>$IMError.IMError/ns6:ErrorDesc</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                    </copy>
                    <copy>
                        <from>$IMError.IMError/ns6:ErrorType</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                    </copy>
                    <copy>
                        <from>$IMError.IMError/ns6:ErrorCode</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                    </copy>
                </assign>
                <if name="IfAsync4">
                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Async</condition>
                    <assign name="AssignAsyncError4">
                        <copy>
                            <from>BPELUtils:sendTrapToOpsManagement(concat('Error in ProcessOrder BPEL flow for an Async Request. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc))</from>
                            <to>$DummyString</to>
                        </copy>
                    </assign>
                </if>
                <reply name="ReplyErr4" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
            </sequence>
        </catch>
        <catch xmlns:pos="http://xml.smilecoms.com/POS" faultMessageType="pos:POSError" faultVariable="POSError">
            <sequence name="Sequence122">
                <sxt:trace>
                    <sxt:log level="warning" location="onComplete">
                        <from>concat('Error in ProcessOrder BPEL flow. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc)</from>
                    </sxt:log>
                </sxt:trace>
                <compensate name="Compensate5"/>
                <assign name="AssignErr5">
                    <copy>
                        <from>$POSError.POSError/ns7:ErrorDesc</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                    </copy>
                    <copy>
                        <from>$POSError.POSError/ns7:ErrorType</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                    </copy>
                    <copy>
                        <from>$POSError.POSError/ns7:ErrorCode</from>
                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                    </copy>
                </assign>
                <if name="IfAsync5">
                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Async</condition>
                    <assign name="AssignAsyncError5">
                        <copy>
                            <from>BPELUtils:sendTrapToOpsManagement(concat('Error in ProcessOrder BPEL flow for an Async Request. Code:', $Fault1FaultVar.SCAError/ns0:ErrorCode, ' Description:', $Fault1FaultVar.SCAError/ns0:ErrorDesc))</from>
                            <to>$DummyString</to>
                        </copy>
                    </assign>
                </if>
                <reply name="ReplyErr5" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
            </sequence>
        </catch>
    </faultHandlers>
    <sequence>
        <receive name="Receive1" createInstance="yes" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" variable="SCAProcessOrderIn"/>
        <if name="IfAsync">
            <condition>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Async</condition>
            <sequence name="Sequence408">
                <assign name="AssignDoneAsync">
                    <copy>
                        <from>'true'</from>
                        <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                    </copy>
                </assign>
                <reply name="ReplyAsync" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" variable="SCAProcessOrderOut"/>
            </sequence>
        </if>
        <scope name="Dynamic_EPR" xmlns:LT="java://com.smilecoms.lt.LT" >
            <variables>
                <variable name="EndPoint" type="xsd:string"/>
            </variables>
            <sequence name="Dynamic_EPR">
                <assign name="AssignPLs1">
                    <copy>
                        <from>LT:getEndPoint('CM')</from>
                        <to>$EndPoint</to>
                    </copy>
                    <copy>
                        <from>sxxf:doUnMarshal($EndPoint)</from>
                        <to partnerLink="CM"/>
                    </copy>
                </assign>
                <assign name="AssignPLs2">
                    <copy>
                        <from>LT:getEndPoint('BM')</from>
                        <to>$EndPoint</to>
                    </copy>
                    <copy>
                        <from>sxxf:doUnMarshal($EndPoint)</from>
                        <to partnerLink="BM"/>
                    </copy>
                </assign>
                <assign name="AssignPLs3">
                    <copy>
                        <from>LT:getEndPoint('IM')</from>
                        <to>$EndPoint</to>
                    </copy>
                    <copy>
                        <from>sxxf:doUnMarshal($EndPoint)</from>
                        <to partnerLink="IM"/>
                    </copy>
                </assign>
                <assign name="AssignPLs4">
                    <copy>
                        <from>LT:getEndPoint('POS')</from>
                        <to>$EndPoint</to>
                    </copy>
                    <copy>
                        <from>sxxf:doUnMarshal($EndPoint)</from>
                        <to partnerLink="POS"/>
                    </copy>
                </assign>
                <assign name="AssignPLs5">
                    <copy>
                        <from>LT:getEndPoint('AM')</from>
                        <to>$EndPoint</to>
                    </copy>
                    <copy>
                        <from>sxxf:doUnMarshal($EndPoint)</from>
                        <to partnerLink="AM"/>
                    </copy>
                </assign>
            </sequence>
        </scope>
        
        
        
        <sequence name="Initialisation">
            <assign name="AssignDefaults">
                <sxt:trace>
                    <sxt:log level="finest" location="onStart">
                        <from>'In processorder. Assigning defaults'</from>
                    </sxt:log>
                    <sxt:log level="finest" location="onComplete">
                        <from>'Finished assigning defaults'</from>
                    </sxt:log>
                </sxt:trace>
                <copy>
                    <from>-1</from>
                    <to variable="DefaultAccountId"/>
                </copy>
                <copy>
                    <from>''</from>
                    <to variable="ICCID"/>
                </copy>
                <copy>
                    <from>false()</from>
                    <to variable="MustSetServicesAsTD"/>
                </copy>
                <copy>
                    <from>false()</from>
                    <to variable="ValidatedSIM"/>
                </copy>
                <copy>
                    <from>false()</from>
                    <to variable="MustVerifyPhoneNumber"/>
                </copy>
                <copy>
                    <from>false()</from>
                    <to variable="ValidatedPhoneNumber"/>
                </copy>
                <copy>
                    <from>0</from>
                    <to>$SIMSaleSaleId</to>
                </copy>
                <copy>
                    <from>0</from>
                    <to>$CreatedByOrgId</to>
                </copy>
                <copy>
                    <from>''</from>
                    <to variable="OriginalPublicIdentity"/>
                </copy>
            </assign>
        </sequence>
        
        
        
        
        
        
        <!-- START - If its not a new product creation, put the service spec id's into all the service orders from the existing service instance data-->
        <if name="IfExistingProductInstance">
            <condition>$SCAProcessOrderIn.ProductOrder/ns0:Action != 'create'</condition>
            <sequence name="Sequence36">
                <assign name="AssignGetProductInstance">
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ProductInstanceId</from>
                        <to>$CMGetProductInstancesIn.ProductInstanceQuery/ns1:ProductInstanceId</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                        <to>$CMGetProductInstancesIn.ProductInstanceQuery/ns1:PlatformContext/ns1:TxId</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                        <to>$CMGetProductInstancesIn.ProductInstanceQuery/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                        <to>$CMGetProductInstancesIn.ProductInstanceQuery/ns1:PlatformContext/ns1:OriginatingIP</to>
                    </copy>
                    <copy ignoreMissingFromData="yes">
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                        <to>$CMGetProductInstancesIn.ProductInstanceQuery/ns1:PlatformContext/ns1:Tenant</to>
                    </copy>
                    <copy>
                        <from>'SVC'</from>
                        <to>$CMGetProductInstancesIn.ProductInstanceQuery/ns1:Verbosity</to>
                    </copy>
                </assign>
                <invoke name="GetExistingProductInstance" partnerLink="CM" operation="GetProductInstances" portType="ns5:CMSoap" inputVariable="CMGetProductInstancesIn" outputVariable="CMGetProductInstancesOut"/>
                <assign name="CheckPermissions1">
                <copy>
                    <from>BPELUtils:checkPermissions($SCAProcessOrderIn.ProductOrder/ns0:SCAContext, 'ProductInstance', $CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductInstanceId)</from>
                    <to>$SCAProcessOrderOut.Done/ns0:SCAContext/ns0:Obviscated</to>
                </copy>
                </assign>
                <forEach name="ForEachSIInOrder" parallel="no" counterName="SICounter">
                    <startCounterValue>1</startCounterValue>
                    <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders)</finalCounterValue>
                    <scope name="ServiceSpecPopulation">
                        <forEach name="ForEachSIInExistingProduct" parallel="no" counterName="ExistingSICounter">
                            <startCounterValue>1</startCounterValue>
                            <finalCounterValue>count($CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductServiceInstanceMappings)</finalCounterValue>
                            <scope name="Scope8">
                                <if name="IfSameSIAndNotASpecChange">
                                    <condition>(count($CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductServiceInstanceMappings[$ExistingSICounter]/ns1:ServiceInstance/ns1:ServiceSpecificationId) = 0 or $CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductServiceInstanceMappings[$ExistingSICounter]/ns1:ServiceInstance/ns1:ServiceSpecificationId = 0) and $CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductServiceInstanceMappings[$ExistingSICounter]/ns1:ServiceInstance/ns1:ServiceInstanceId = $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</condition>
                                    <assign name="SetTheSpecId">
                                        <copy>
                                            <from>$CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductServiceInstanceMappings[$ExistingSICounter]/ns1:ServiceInstance/ns1:ServiceSpecificationId</from>
                                            <to>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceSpecificationId</to>
                                        </copy>
                                    </assign>
                                </if>
                            </scope>
                        </forEach>
                    </scope>
                </forEach>
            </sequence>
        </if>
        <!-- END - If its not a new product creation, put the service spec id's into all the service orders from the existing service instance data-->
        
        
        <!-- START VERIFY THE CALLER IS A MEMBER OF ONE ORGANISATION -->
        <if name="CheckCallingProfileIfCreation">
            <condition>$SCAProcessOrderIn.ProductOrder/ns0:Action = 'create'</condition>
            <sequence name="SequenceCheckOrg">
                <assign name="AssignGetCaller">
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                        <to>$IMGetCustomersIn.CustomerQuery/ns6:PlatformContext/ns6:TxId</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                        <to>$IMGetCustomersIn.CustomerQuery/ns6:PlatformContext/ns6:OriginatingIdentity</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                        <to>$IMGetCustomersIn.CustomerQuery/ns6:PlatformContext/ns6:OriginatingIP</to>
                    </copy>
                    <copy ignoreMissingFromData="yes">
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                        <to>$IMGetCustomersIn.CustomerQuery/ns6:PlatformContext/ns6:Tenant</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                        <to>$IMGetCustomersIn.CustomerQuery/ns6:SSOIdentity</to>
                    </copy>
                    <copy>
                        <from>1</from>
                        <to>$IMGetCustomersIn.CustomerQuery/ns6:ResultLimit</to>
                    </copy>
                    <copy>
                        <from>'CUSTOMER'</from>
                        <to>$IMGetCustomersIn.CustomerQuery/ns6:Verbosity</to>
                    </copy>
                </assign>
                <invoke name="GetCallingCustomer" partnerLink="IM" operation="GetCustomers" xmlns:tns="http://xml.smilecoms.com/IM" portType="tns:IMSoap" inputVariable="IMGetCustomersIn" outputVariable="IMGetCustomersOut"/>
                <if name="IfNotInOneOrg">
                    <condition>count($IMGetCustomersOut.CustomerList/ns6:Customers/ns6:CustomerRoles) != 1</condition>
                    <sequence name="Sequence40491">
                        <assign name="AssignNotMemberOfOneOrg">
                            <copy>
                                <from>'You have to be a member of one and only one Organisation in order to provision a product'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                            </copy>
                            <copy>
                                <from>'business'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                            </copy>
                            <copy>
                                <from>'SCA-0034'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                            </copy>
                        </assign>
                        <reply name="NotMemberOfOneOrg" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                        <exit name="ExitNotMemberOfOneOrg"/>
                    </sequence>
                </if>
                <assign name="AssignCreatedById">
                    <copy>
                        <from>$IMGetCustomersOut.CustomerList/ns6:Customers/ns6:CustomerRoles/ns6:OrganisationId</from>
                        <to variable="CreatedByOrgId"/>
                    </copy>
                </assign>
            </sequence>
        </if>
        
        <!-- END VERIFY THE CALLER IS A MEMBER OF ONE ORGANISATION -->
        
        
        
        
        <!-- START - Validate customer and organisation data in the order-->
        
        <sequence name="Customer_Profile_Validation_Logic">
            <assign name="AssignGetCustomerContext">
                <copy>
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                    <to>$IMGetCustomersIn.CustomerQuery/ns6:PlatformContext/ns6:TxId</to>
                </copy>
                <copy>
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                    <to>$IMGetCustomersIn.CustomerQuery/ns6:PlatformContext/ns6:OriginatingIdentity</to>
                </copy>
                <copy>
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                    <to>$IMGetCustomersIn.CustomerQuery/ns6:PlatformContext/ns6:OriginatingIP</to>
                </copy>
                <copy ignoreMissingFromData="yes">
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                    <to>$IMGetCustomersIn.CustomerQuery/ns6:PlatformContext/ns6:Tenant</to>
                </copy>
                <copy>
                    <from>-1</from>
                    <to>$IMGetCustomersOut.CustomerList/ns6:Customers/ns6:CustomerId</to>
                </copy>
                <copy>
                    <from>'CUSTOMER'</from>
                    <to>$IMGetCustomersIn.CustomerQuery/ns6:Verbosity</to>
                </copy>
            </assign>
            
            <!-- START - If there is a customer profile Id, check with IM that it exists-->
            <if name="IfTheProductInstanceHasACustomerProfileId">
                <condition>count($SCAProcessOrderIn.ProductOrder/ns0:CustomerId) != 0 and $SCAProcessOrderIn.ProductOrder/ns0:CustomerId != 0</condition>
                <sequence name="Sequence123">
                    <assign name="AssignGetCustomerId">                
                        <copy>
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:CustomerId</from>
                            <to>$IMGetCustomersIn.CustomerQuery/ns6:CustomerId</to>
                        </copy>
                    </assign>
                    <invoke name="GetCustomerForPI" partnerLink="IM" operation="GetCustomers" xmlns:tns="http://xml.smilecoms.com/IM" portType="tns:IMSoap" inputVariable="IMGetCustomersIn" outputVariable="IMGetCustomersOut"/>
                    <!-- START - If there is an Organisation Id, then verify the customer has a role in the Organisation-->
                    <if name="IfNotClassificationIsCustomer">
                        <condition>'customer' != $IMGetCustomersOut.CustomerList/ns6:Customers/ns6:Classification</condition>
                        <sequence name="Sequence4041">
                            <assign name="AssignCustNotCustomer">
                                <sxt:trace>
                                    <sxt:log level="finest" location="onStart">
                                        <from>'The customer classification is not customer so the services must all be TD'</from>
                                    </sxt:log>
                                </sxt:trace>
                                <copy>
                                    <from>true()</from>
                                    <to variable="MustSetServicesAsTD"/>
                                </copy>
                            </assign>
                        </sequence>
                    </if>
                    <if name="IfTheProductInstanceHasAOrganisationId">
                        <condition>count($SCAProcessOrderIn.ProductOrder/ns0:OrganisationId) != 0 and $SCAProcessOrderIn.ProductOrder/ns0:OrganisationId != 0</condition>
                        <sequence name="Sequence403">
                            <assign name="AssignNotFound1">
                                <copy>
                                    <from>false()</from>
                                    <to variable="Found"/>
                                </copy>
                            </assign>
                            <forEach name="ForEachRole1" parallel="no" counterName="role">
                                <startCounterValue>1</startCounterValue>
                                <finalCounterValue>count($IMGetCustomersOut.CustomerList/ns6:Customers/ns6:CustomerRoles)</finalCounterValue>
                                <scope name="Scope64">
                                    <sequence name="Sequence402">
                                        <if name="IfSameOrg">
                                            <condition>$SCAProcessOrderIn.ProductOrder/ns0:OrganisationId = $IMGetCustomersOut.CustomerList/ns6:Customers/ns6:CustomerRoles[$role]/ns6:OrganisationId</condition>
                                            <assign name="AssignFound">
                                                <copy>
                                                    <from>true()</from>
                                                    <to variable="Found"/>
                                                </copy>
                                            </assign>
                                        </if>
                                    </sequence>
                                </scope>
                            </forEach>
                            <if name="IfCustomerNotInOrg">
                                <condition>not($Found)</condition>
                                <sequence name="Sequence404">
                                    <assign name="AssignCustNotInOrg">
                                        <copy>
                                            <from>'The customer must have a role in the organisation'</from>
                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                        </copy>
                                        <copy>
                                            <from>'business'</from>
                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                        </copy>
                                        <copy>
                                            <from>'SCA-0007'</from>
                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                        </copy>
                                    </assign>
                                    <reply name="ReplyCustomerNotInOrg" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                    <exit name="ExitWithErr"/>
                                </sequence>
                            </if>
                        </sequence>
                    </if>
                    <!-- END - If there is an Organisation Id, then verify the customer has a role in the Organisation-->
                </sequence>
            </if>
            <!-- END - If there is a customer profile Id, check with IM that it exists-->
            
            <!-- START - If there is a customer profile Id on each service instance, check with IM that it exists and that it has a role in the products Organisation-->
            <forEach name="ForEachSI_Loop0" parallel="no" counterName="SICounter">
                <sxt:trace>
                    <sxt:log level="finest" location="onStart">
                        <from>'Going to loop through service instance provisioning requests checking if all customer ids exist'</from>
                    </sxt:log>
                </sxt:trace>
                <startCounterValue>1</startCounterValue>
                <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders)</finalCounterValue>
                <scope name="Customer_Scope">
                    
                    <if name="IfDifferentCustomer">
                        <condition>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:CustomerId) != 0 and $IMGetCustomersOut.CustomerList/ns6:Customers[1]/ns6:CustomerId != $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:CustomerId and $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:CustomerId != 0</condition>
                        <sequence name="Sequence122">
                            <assign name="AssignGetCustomer1">
                                <copy>
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:CustomerId</from>
                                    <to>$IMGetCustomersIn.CustomerQuery/ns6:CustomerId</to>
                                </copy>
                            </assign>
                            <invoke name="GetCustomerForSI" partnerLink="IM" operation="GetCustomers" xmlns:tns="http://xml.smilecoms.com/IM" portType="tns:IMSoap" inputVariable="IMGetCustomersIn" outputVariable="IMGetCustomersOut"/>
                            <if name="IfNotClassificationIsCustomer2">
                                <condition>$IMGetCustomersOut.CustomerList/ns6:Customers/ns6:Classification = 'pending'</condition>
                                <sequence name="Sequence40411">
                                    <assign name="AssignCustNotCustomer1">
                                        <sxt:trace>
                                            <sxt:log level="finest" location="onStart">
                                                <from>'The customer classification is pending so the services must all be TD'</from>
                                            </sxt:log>
                                        </sxt:trace>
                                        <copy>
                                            <from>true()</from>
                                            <to variable="MustSetServicesAsTD"/>
                                        </copy>
                                    </assign>
                                </sequence>
                            </if>
                            <if name="IfOrgIdInRequest1">
                                <condition>count($SCAProcessOrderIn.ProductOrder/ns0:OrganisationId) != 0 and $SCAProcessOrderIn.ProductOrder/ns0:OrganisationId != 0</condition>
                                <sequence name="Sequence403">
                                    <assign name="AssignNotFound2">
                                        <copy>
                                            <from>false()</from>
                                            <to variable="Found"/>
                                        </copy>
                                    </assign>
                                    <forEach name="ForEachRole2" parallel="no" counterName="role">
                                        <startCounterValue>1</startCounterValue>
                                        <finalCounterValue>count($IMGetCustomersOut.CustomerList/ns6:Customers/ns6:CustomerRoles)</finalCounterValue>
                                        <scope name="Scope64">
                                            <sequence name="Sequence402">
                                                <if name="IfSameOrg">
                                                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:OrganisationId = $IMGetCustomersOut.CustomerList/ns6:Customers/ns6:CustomerRoles[$role]/ns6:OrganisationId</condition>
                                                    <assign name="AssignFound">
                                                        <copy>
                                                            <from>true()</from>
                                                            <to variable="Found"/>
                                                        </copy>
                                                    </assign>
                                                </if>
                                            </sequence>
                                        </scope>
                                    </forEach>
                                    <if name="IfCustomerNotInOrg">
                                        <condition>not($Found)</condition>
                                        <sequence name="Sequence404">
                                            <assign name="AssignCustNotInOrg">
                                                <copy>
                                                    <from>'The customer must have a role in the organisation'</from>
                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                </copy>
                                                <copy>
                                                    <from>'business'</from>
                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                </copy>
                                                <copy>
                                                    <from>'SCA-0007'</from>
                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                </copy>
                                            </assign>
                                            <reply name="ReplyCustomerNotInOrg" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                            <exit name="ExitWithErr2"/>
                                        </sequence>
                                    </if>
                                </sequence>
                            </if>
                        </sequence>
                    </if>
                </scope>
            </forEach>
            <!-- END - If there is a customer profile Id on each service instance, check with IM that it exists and that it has a role in the products Organisation-->
        </sequence>
        <!-- END - Validate customer and organisation data in the order-->
        
        
        
        
        
        
        <!-- START 
        
        Call CM to verify max, min  and group id counts
        Pass following data:
        - product instance id
        - product spec id
        - order action
        - service action:create/update/delete
        - Service Instance Id
        - Service Spec Id

        -->
        
        <sequence name="OccurenceValidation">
            <sxt:trace>
                <sxt:log level="finest" location="onStart">
                    <from>'Starting occurence validation'</from>
                </sxt:log>
                <sxt:log level="finest" location="onComplete">
                    <from>'Finished occurence validation'</from>
                </sxt:log>
            </sxt:trace>
            <assign name="AssignValidation">
                <copy>
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:PlatformContext/ns1:TxId</to>
                </copy>
                <copy>
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                </copy>
                <copy>
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:PlatformContext/ns1:OriginatingIP</to>
                </copy>
                <copy ignoreMissingFromData="yes">
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:PlatformContext/ns1:Tenant</to>
                </copy>
                <copy ignoreMissingFromData="yes">
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ProductSpecificationId</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:ProductSpecificationId</to>
                </copy>
                <copy ignoreMissingFromData="yes">
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ProductInstanceId</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:ProductInstanceId</to>
                </copy>
                <copy>
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:Action</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:Action</to>
                </copy>
                <copy ignoreMissingFromData="yes">
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:Segment</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:Segment</to>
                </copy>
                <copy ignoreMissingFromData="yes">
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:OrganisationId</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:OrganisationId</to>
                </copy>
                <copy ignoreMissingFromData="yes">
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:CustomerId</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:CustomerId</to>
                </copy>
            </assign>
            <forEach name="ForEachSIInTheOrder" parallel="no" counterName="SIInOrder">
                <startCounterValue>1</startCounterValue>
                <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders)</finalCounterValue>
                <scope name="Scope63">
                    <assign name="AssignSIValidation">
                        <copy>
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SIInOrder]/ns0:Action</from>
                            <to>$CMValidateOrderIn.OrderData/ns1:ServiceInstanceData[$SIInOrder]/ns1:Action</to>
                        </copy>
                        <copy ignoreMissingFromData="yes">
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SIInOrder]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                            <to>$CMValidateOrderIn.OrderData/ns1:ServiceInstanceData[$SIInOrder]/ns1:ServiceInstanceId</to>
                        </copy>
                        <copy>
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SIInOrder]/ns0:ServiceInstance/ns0:ServiceSpecificationId</from>
                            <to>$CMValidateOrderIn.OrderData/ns1:ServiceInstanceData[$SIInOrder]/ns1:ServiceSpecificationId</to>
                        </copy>
                    </assign>
                </scope>
            </forEach>
            <assign name="AssignCallersRoles">
                <copy>
                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Roles</from>
                    <to>$CMValidateOrderIn.OrderData/ns1:CallersRoles</to>
                </copy>
            </assign>
            <invoke name="CallCMToVerifyData" partnerLink="CM" operation="ValidateOrder" portType="ns5:CMSoap" inputVariable="CMValidateOrderIn" outputVariable="CMValidateOrderOut"/>
        </sequence>
        
        <!-- END - Call CM to verify max, min  and group id counts-->
        
        
        
        
        
        <!-- START - Repopulate the AVPs on the PI and SI's using the product and service specs along with the AVPs passed in the Order
        If we see certain AVP's as we go along, then we validate them against business rules. E.g. for SIM cards, validate they can be provisioned -->
        <sequence name="AVP_Population">
            <forEach name="ForEachSI_Loop2" parallel="no" counterName="SICounter">
                <sxt:trace>
                    <sxt:log level="finest" location="onStart">
                        <from>'Populating all AVP values from the SCA data, service spec data and inherited AVP values'</from>
                    </sxt:log>
                </sxt:trace>
                <startCounterValue>1</startCounterValue>
                <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders)</finalCounterValue>
                <scope name="AVP_Scope">
                    <variables>
                        <variable name="CMGetServiceSpecificationOut" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:ServiceSpecificationResponse"/>
                        <variable name="CMGetServiceSpecificationIn" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:GetServiceSpecificationRequest"/>
                        <variable name="SCACallingGetServiceInstancesOut" messageType="tns:ServiceInstancesResponse"/>
                        <variable name="SCACallingGetServiceInstancesIn" messageType="tns:GetServiceInstancesRequest"/>
                        <variable name="LookedUpOriginalServiceInstance" type="xsd:boolean"/>
                    </variables>
                    <sequence name="MapAVPs">
                        <assign name="Assign_Havent_Looked_Up_SI">
                            <copy>
                                <from>false()</from>
                                <to variable="LookedUpOriginalServiceInstance"/>
                            </copy>
                        </assign>
                        <assign name="Assign_Get_ServiceSpec">
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                <to>$CMGetServiceSpecificationIn.ServiceSpecificationQuery/ns1:PlatformContext/ns1:TxId</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                <to>$CMGetServiceSpecificationIn.ServiceSpecificationQuery/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                <to>$CMGetServiceSpecificationIn.ServiceSpecificationQuery/ns1:PlatformContext/ns1:OriginatingIP</to>
                            </copy>
                            <copy ignoreMissingFromData="yes">
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                <to>$CMGetServiceSpecificationIn.ServiceSpecificationQuery/ns1:PlatformContext/ns1:Tenant</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceSpecificationId</from>
                                <to>$CMGetServiceSpecificationIn.ServiceSpecificationQuery/ns1:ServiceSpecificationId</to>
                            </copy>
                            <copy>
                                <from>'SVCAVP'</from>
                                <to>$CMGetServiceSpecificationIn.ServiceSpecificationQuery/ns1:Verbosity</to>
                            </copy>
                        </assign>
                        <invoke name="GetServiceSpecification" partnerLink="CM" operation="GetServiceSpecification" xmlns:tns="http://xml.smilecoms.com/CM" portType="tns:CMSoap" inputVariable="CMGetServiceSpecificationIn" outputVariable="CMGetServiceSpecificationOut">
                            <sxt:trace>
                                <sxt:log level="finest" location="onStart">
                                    <from>concat('Calling CM GetServiceSpecification to get the AVPs for service spec id ', $CMGetServiceSpecificationIn.ServiceSpecificationQuery/ns1:ServiceSpecificationId)</from>
                                </sxt:log>
                            </sxt:trace>    
                        </invoke>
                        <forEach name="ForEachSpecificationAVP" parallel="no" counterName="SpecAVPIndex">
                            <sxt:trace>
                                <sxt:log level="finest" location="onStart">
                                    <from>'Looping through each AVP on this service spec'</from>
                                </sxt:log>
                            </sxt:trace>    
                            <startCounterValue>1</startCounterValue>
                            <finalCounterValue>count($CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs)</finalCounterValue>
                            <scope name="ReplaceSpecAVPValueWithPassedInValue">
                                <variables>
                                    <variable name="ParentAttribute" type="xsd:string"/>
                                    <variable name="ParentServiceSpecId" type="xsd:int"/>
                                    <variable name="ParentFound" type="xsd:boolean"/>
                                    <variable name="UserDefinedAttribute" type="xsd:string"/>
                                    <variable name="UserDefinedFound" type="xsd:boolean"/>
                                </variables>
                                <sequence name="Sequence7">
                                    <!--sxt:trace>
                                        <sxt:log level="finest" location="onStart">
                                            <from>concat('Dealing with AVP ', $CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Attribute)</from>
                                        </sxt:log>
                                    </sxt:trace--> 
                                    
                                    
                                    <if name="IfUserDefined">
                                        <condition>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:UserDefined</condition>
                                        <sequence name="ReplaceWithSCAValue">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>'This AVP is user defined so the value will be retrieved from the SCA data passed in'</from>
                                                </sxt:log>
                                            </sxt:trace> 
                                            <assign name="AssignUserDefinedNotFound">
                                                <copy>
                                                    <from>false()</from>
                                                    <to variable="UserDefinedFound"/>
                                                </copy>
                                                <!-- USER DEFINED - A value (blank or not) passed in by the caller will be used. If no value is passed, existing one from the existing SI will be used --> 
                                                <copy>
                                                    <from>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Attribute</from>
                                                    <to variable="UserDefinedAttribute"/>
                                                </copy>
                                            </assign>
                                            <forEach name="ForEachAVPPassedIn" parallel="no" counterName="PassedInAVPIndex">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                                <scope name="Scope3">
                                                    <if name="IfSameAVP">
                                                        <condition>$UserDefinedAttribute = $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$PassedInAVPIndex]/ns0:Attribute</condition>
                                                        <assign name="AssignAVP">
                                                            <sxt:trace>
                                                                <sxt:log level="finest" location="onStart">
                                                                    <from>concat('SCA value passed in is ', $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$PassedInAVPIndex]/ns0:Value, ' and is being copied into the AVPs for the SI')</from>
                                                                </sxt:log>
                                                            </sxt:trace> 
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$PassedInAVPIndex]/ns0:Value</from>
                                                                <to>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value</to>
                                                            </copy>
                                                            <copy>
                                                                <from>true()</from>
                                                                <to variable="UserDefinedFound"/>
                                                            </copy>
                                                        </assign>
                                                    </if>
                                                </scope>
                                            </forEach>
                                            
                                            
                                            <if name="IfNoUserDefinedValueFoundInInputData">
                                                <condition>$UserDefinedFound = false()</condition>
                                                <sequence name="GetUserDefinedValueFromTheExistingSI">
                                                    <sxt:trace>
                                                        <sxt:log level="finest" location="onStart">
                                                            <from>concat('No value found for user defined AVP ', $UserDefinedAttribute, ' in the request data. Now going to get existing SI and get value from there')</from>
                                                        </sxt:log>
                                                    </sxt:trace>
                                                    
                                                    <if name="IfThisIsProductCreation">
                                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:Action = 'create'</condition>
                                                        <sequence name="Sequence226">
                                                            <assign name="AssignCantGetUserDefinedAVP">
                                                                <copy>
                                                                    <from>concat('Cannot determine value of a user defined AVP. Service Instance AVP data is missing in the order -- ', $UserDefinedAttribute)</from>
                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'business'</from>
                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'SCA-0002'</from>
                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                                </copy>
                                                            </assign>
                                                            <reply name="ReplyErrorCantGetUserDefinedAVP" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                            <exit name="Exit3"/>
                                                        </sequence>
                                                    </if>
                                                    <scope name="CopyUserDefinedAttributeOver">
                                                        <sequence name="Sequence400">
                                                            <assign name="AssignGetSIData">
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:TxId</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:OriginatingIdentity</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:OriginatingIP</to>
                                                                </copy>
                                                                <copy ignoreMissingFromData="yes">
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Tenant</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:ServiceInstanceId</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'MAIN_AVP'</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:Verbosity</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Roles</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Roles</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'getServiceInstances'</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Method</to>
                                                                </copy>
                                                            </assign>
                                                            <if name="IfNoUserDefinedValueFoundInInputData">
                                                                <condition>$LookedUpOriginalServiceInstance = false()</condition>
                                                                <sequence name="Sequence_GetSIDataForUserDefinedAVPsSI">
                                                                    <invoke name="GetSIDataForUserDefinedAVPsSI" partnerLink="SCACalling" operation="GetServiceInstances" portType="tns:SCASoap" inputVariable="SCACallingGetServiceInstancesIn" outputVariable="SCACallingGetServiceInstancesOut"/>
                                                                    <assign name="Assign_Have_Looked_Up_SI">
                                                                        <copy>
                                                                            <from>true()</from>
                                                                            <to variable="LookedUpOriginalServiceInstance"/>
                                                                        </copy>
                                                                    </assign>
                                                                </sequence>
                                                            </if>
                                                            <assign name="AssignAVPFromSI">
                                                                <sxt:trace>
                                                                    <sxt:log level="finest" location="onStart">
                                                                        <from>concat('Looking for user defined AVP in existing SI data with attribute name ', $UserDefinedAttribute)</from>
                                                                    </sxt:log>
                                                                    <sxt:log level="finest" location="onComplete">
                                                                        <from>concat('User defined AVP value found in existing SI data. It is ', $CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value)</from>
                                                                    </sxt:log>
                                                                </sxt:trace>
                                                                <copy>
                                                                    <from>BPELUtils:getAVPValueAsStringEmptyIfMissing($SCACallingGetServiceInstancesOut.ServiceInstanceList/ns0:ServiceInstances[1], $UserDefinedAttribute)</from>
                                                                    <to>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value</to>
                                                                </copy>
                                                            </assign>
                                                        </sequence>
                                                    </scope>
                                                </sequence>
                                            </if>
                                        </sequence>
                                    </if> <!-- END If user defined -->
                                    
                                    <if name="IfInherited">
                                        <condition>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:InputType = 'inherited'</condition>
                                        <sequence name="Sequence37">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>'The input type of this AVP is inherited'</from>
                                                </sxt:log>
                                            </sxt:trace>
                                            <assign name="AssignParentNotFound">
                                                <copy>
                                                    <from>false()</from>
                                                    <to variable="ParentFound"/>
                                                </copy>
                                            </assign>
                                            <assign name="AssignParentLookupData">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onComplete">
                                                        <from>concat('Looking up inherited value. Parent attribute is ', $ParentAttribute, ' on spec id ', $ParentServiceSpecId)</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                                <copy>
                                                    <from>number(substring-before($CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value, ':'))</from>
                                                    <to variable="ParentServiceSpecId"/>
                                                </copy>
                                                <copy>
                                                    <from>substring-after($CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value, ':')</from>
                                                    <to variable="ParentAttribute"/>
                                                </copy>
                                            </assign>
                                            <forEach name="ForEachServiceInstance" parallel="no" counterName="ParentSI">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders)</finalCounterValue>
                                                <scope name="ParentLoop">
                                                    <if name="IfParentMatches">
                                                        <sxt:trace>
                                                            <sxt:log level="finest" location="onStart">
                                                                <from>concat('Checking if this SI is the parent. parent spec id is ', $ParentServiceSpecId, ' and this ones is ', $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$ParentSI]/ns0:ServiceInstance/ns0:ServiceSpecificationId)</from>
                                                            </sxt:log>
                                                        </sxt:trace>
                                                        <condition>$ParentFound = false() and $ParentServiceSpecId = $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$ParentSI]/ns0:ServiceInstance/ns0:ServiceSpecificationId</condition>
                                                        <sequence name="Sequence38">
                                                            <scope name="Scope62">
                                                                <faultHandlers>
                                                                    <catchAll>
                                                                        <empty name="Empty1"/>
                                                                    </catchAll>
                                                                </faultHandlers>
                                                                <assign name="AssignAVP">
                                                                    <sxt:trace>
                                                                        <sxt:log level="finest" location="onComplete">
                                                                            <from>concat('Found inherited value from parent AVP passed in request. Value is ', $CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value)</from>
                                                                        </sxt:log>
                                                                    </sxt:trace>
                                                                    <copy>
                                                                        <from>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$ParentSI]/ns0:ServiceInstance, $ParentAttribute)</from>
                                                                        <to>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>true()</from>
                                                                        <to variable="ParentFound"/>
                                                                    </copy>
                                                                </assign>
                                                            </scope>
                                                        </sequence>
                                                    </if>
                                                </scope>
                                            </forEach>
                                            <if name="IfNoParentFoundInInputData">
                                                <condition>$ParentFound = false()</condition>
                                                <sequence name="GetValueFromTheExistingSI">
                                                    <if name="IfProductCreation">
                                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:Action = 'create'</condition>
                                                        <sequence name="Sequence126">
                                                            <assign name="AssignCantGetInheritedAVP">
                                                                <copy>
                                                                    <from>'Cannot determine value of inherited AVP. A Service Instance is missing in the order'</from>
                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'business'</from>
                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'SCA-0002'</from>
                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                                </copy>
                                                            </assign>
                                                            <reply name="ReplyErrorCantGetAVP" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                            <exit name="Exit2"/>
                                                        </sequence>
                                                    </if>
                                                    <forEach name="ForEachSIInTheProduct" parallel="no" counterName="SIInProduct">
                                                        <sxt:trace>
                                                            <sxt:log level="finest" location="onStart">
                                                                <from>'No value found for inherited AVP in the request data. Now going to get existing SI and get value from there'</from>
                                                            </sxt:log>
                                                        </sxt:trace>
                                                        <startCounterValue>1</startCounterValue>
                                                        <finalCounterValue>count($CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductServiceInstanceMappings)</finalCounterValue>
                                                        <scope name="CopyAttributeOver">
                                                            <variables>
                                                                <variable name="SCACallingGetServiceInstancesOut" messageType="tns:ServiceInstancesResponse"/>
                                                                <variable name="SCACallingGetServiceInstancesIn" messageType="tns:GetServiceInstancesRequest"/>
                                                            </variables>
                                                            <if name="IfCorrectServiceSpec">
                                                                <condition>$ParentFound = false() and $CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductServiceInstanceMappings[$SIInProduct]/ns1:ServiceInstance/ns1:ServiceSpecificationId = $ParentServiceSpecId</condition>
                                                                <sequence name="Sequence40">
                                                                    <assign name="AssignGetSIData">
                                                                        <copy>
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                            <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:TxId</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                                            <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:OriginatingIdentity</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                            <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:OriginatingIP</to>
                                                                        </copy>
                                                                        <copy ignoreMissingFromData="yes">
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                            <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Tenant</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>$CMGetProductInstancesOut.ProductInstanceList/ns1:ProductInstances[1]/ns1:ProductServiceInstanceMappings[$SIInProduct]/ns1:ServiceInstance/ns1:ServiceInstanceId</from>
                                                                            <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:ServiceInstanceId</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>'MAIN_AVP'</from>
                                                                            <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:Verbosity</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Roles</from>
                                                                            <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Roles</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>'getServiceInstances'</from>
                                                                            <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Method</to>
                                                                        </copy>
                                                                    </assign>
                                                                    <invoke name="GetSIData" partnerLink="SCACalling" operation="GetServiceInstances" portType="tns:SCASoap" inputVariable="SCACallingGetServiceInstancesIn" outputVariable="SCACallingGetServiceInstancesOut"/>
                                                                    <assign name="AssignAVPFromSI">
                                                                        <sxt:trace>
                                                                            <sxt:log level="finest" location="onStart">
                                                                                <from>concat('Looking for Inherited AVP in existing SI data with attribute name ', $ParentAttribute)</from>
                                                                            </sxt:log>
                                                                            <sxt:log level="finest" location="onComplete">
                                                                                <from>concat('Inherited AVP value found in existing SI data. It is ', $CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value)</from>
                                                                            </sxt:log>
                                                                        </sxt:trace>
                                                                        <copy>
                                                                            <from>BPELUtils:getAVPValueAsString($SCACallingGetServiceInstancesOut.ServiceInstanceList/ns0:ServiceInstances[1], $ParentAttribute)</from>
                                                                            <to>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$SpecAVPIndex]/ns1:Value</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>true()</from>
                                                                            <to variable="ParentFound"/>
                                                                        </copy>
                                                                    </assign>
                                                                </sequence>
                                                            </if>
                                                        </scope>
                                                    </forEach>
                                                </sequence>
                                            </if>
                                        </sequence>
                                    </if> <!-- END If Inherited -->
                                </sequence>
                            </scope>
                        </forEach> <!-- End looping through each AVP of the Service Instance Order -->
                        
                        <sequence name="CopyFullAVPsToSCARequest">
                            <forEach name="ForEachAVPToCopy" parallel="no" counterName="copyAVP">
                                <startCounterValue>1</startCounterValue>
                                <finalCounterValue>count($CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs)</finalCounterValue>
                                <scope name="CopyAndValidate">
                                    <variables>
                                        <variable name="SCACallingGetServiceInstancesOut" messageType="tns:ServiceInstancesResponse"/>
                                        <variable name="SCACallingGetServiceInstancesIn" messageType="tns:GetServiceInstancesRequest"/>
                                        <variable name="CMGetProductSpecificationsOut" messageType="ns5:ProductSpecificationsResponse"/>
                                        <variable name="CMGetProductSpecificationsIn" messageType="ns5:GetProductSpecificationsRequest"/>
                                        <variable name="POSGetSalesOut" xmlns:tns="http://xml.smilecoms.com/POS" messageType="tns:GetSalesResponse"/>
                                        <variable name="POSGetSalesIn" xmlns:tns="http://xml.smilecoms.com/POS" messageType="tns:GetSalesRequest"/>
                                        <variable name="IMGetIMSPrivateIdentityOut" xmlns:tns="http://xml.smilecoms.com/IM" messageType="tns:GetIMSPrivateIdentityResponse"/>
                                        <variable name="IMGetIMSPrivateIdentityIn" xmlns:tns="http://xml.smilecoms.com/IM" messageType="tns:GetIMSPrivateIdentityRequest"/>
                                    </variables>
                                    <sequence name="Sequence127">
                                        <assign name="AssignSCAAVP">
                                            <copy>
                                                <from>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$copyAVP]/ns1:Attribute</from>
                                                <to>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Attribute</to>
                                            </copy>
                                            <copy>
                                                <from>$CMGetServiceSpecificationOut.ServiceSpecification/ns1:AVPs[$copyAVP]/ns1:Value</from>
                                                <to>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value</to>
                                            </copy>
                                        </assign>
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        <if name="If_ICCID">
                                            <condition>not($ValidatedSIM) and $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Attribute = 'IntegratedCircuitCardIdentifier' and $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value != ''</condition>
                                            <sequence name="Check_ICCID_Exists_And_Is_Sold">
                                                <assign name="AssignICCID">
                                                    <sxt:trace>
                                                        <sxt:log level="finest" location="onComplete">
                                                            <from>concat('Checking if iccid exists: ', $ICCID)</from>
                                                        </sxt:log>
                                                    </sxt:trace>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                        <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:TxId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                        <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:OriginatingIdentity</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                        <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:OriginatingIP</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                        <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:Tenant</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value</from>
                                                        <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:IntegratedCircuitCardIdentifier</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value</from>
                                                        <to variable="ICCID"/>
                                                    </copy>
                                                    <copy>
                                                        <from>true()</from>
                                                        <to variable="ValidatedSIM"/>
                                                    </copy>
                                                </assign>
                                                <scope name="CheckICCIDScope">
                                                    <variables>
                                                        <variable name="SCACallingProvisionSIMCardOut" messageType="tns:Done"/>
                                                        <variable name="SCACallingProvisionSIMCardIn" messageType="tns:ProvisionSIMCardRequest"/>
                                                    </variables>
                                                    <faultHandlers>
                                                        <catch faultVariable="IMError" xmlns:IM="http://xml.smilecoms.com/IM" faultMessageType="IM:IMError">
                                                            <if name="IfTrainingThenProvision">
                                                                <condition>BPELUtils:getProperty('env.is.training.environment') = 'true'</condition>
                                                                <sequence name="Sequence6">
                                                                    <assign name="Assign2">
                                                                        <copy>
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:SCAContext/ns0:TxId</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:SCAContext/ns0:OriginatingIdentity</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:SCAContext/ns0:OriginatingIP</to>
                                                                        </copy>
                                                                        <copy ignoreMissingFromData="yes">
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:SCAContext/ns0:Tenant</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:IntegratedCircuitCardIdentifier</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>substring($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value, 5, 15)</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:IMSI</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>'11111111111111111111111111111111'</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:UnencryptedSecretKey</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>'1234'</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:UnencryptedPublicKey</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>''</from>
                                                                            <to>$SCACallingProvisionSIMCardIn.NewSIMCardData/ns0:UnencryptedOperatorVariant</to>
                                                                        </copy>
                                                                    </assign>
                                                                    <invoke name="ProvisionSIMForTraining" partnerLink="SCACalling" operation="ProvisionSIMCard" portType="tns:SCASoap" inputVariable="SCACallingProvisionSIMCardIn" outputVariable="SCACallingProvisionSIMCardOut"/>
                                                                    <invoke name="ValidateICCIDTry2" partnerLink="IM" operation="GetIMSPrivateIdentity" xmlns:tns="http://xml.smilecoms.com/IM" portType="tns:IMSoap" inputVariable="IMGetIMSPrivateIdentityIn" outputVariable="IMGetIMSPrivateIdentityOut">
                                                                        <sxt:trace>
                                                                            <sxt:log level="finest" location="onComplete">
                                                                                <from>'Finished provisioning a SIM as this is a training environment'</from>
                                                                            </sxt:log>
                                                                        </sxt:trace>
                                                                    </invoke>
                                                                </sequence>
                                                                <else>
                                                                    <rethrow name="Rethrow1"/>
                                                                </else>
                                                            </if>
                                                        </catch>
                                                    </faultHandlers>
                                                    <invoke name="ValidateICCID" partnerLink="IM" operation="GetIMSPrivateIdentity" xmlns:tns="http://xml.smilecoms.com/IM" portType="tns:IMSoap" inputVariable="IMGetIMSPrivateIdentityIn" outputVariable="IMGetIMSPrivateIdentityOut"/>
                                                </scope>
                                                
                                                <if name="IfSIMUnusable">
                                                    <condition>starts-with($IMGetIMSPrivateIdentityOut.IMSPrivateIdentity/ns6:OSSBSSReferenceId, 'LOCKED')</condition>
                                                    <sequence name="Sequence5">
                                                        <assign name="AssignSIMLocked">
                                                            <copy>
                                                                <from>'Cannot provision on a locked SIM'</from>
                                                                <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                            </copy>
                                                            <copy>
                                                                <from>'business'</from>
                                                                <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                            </copy>
                                                            <copy>
                                                                <from>'SCA-0017'</from>
                                                                <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                            </copy>
                                                        </assign>
                                                        <reply name="Reply2" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                        <exit name="ExitLockedSIM"/>
                                                    </sequence>
                                                </if>
                                                
                                                
                                                
                                                <if name="ProductCreationWithASIM">
                                                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:Action = 'create'</condition>
                                                    <sequence name="ProductCreationWithASIMSeq">
                                                        <assign name="AssignGetProdSpec">
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                <to>$CMGetProductSpecificationsIn.ProductSpecificationQuery/ns1:PlatformContext/ns1:TxId</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                                <to>$CMGetProductSpecificationsIn.ProductSpecificationQuery/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                <to>$CMGetProductSpecificationsIn.ProductSpecificationQuery/ns1:PlatformContext/ns1:OriginatingIP</to>
                                                            </copy>
                                                            <copy ignoreMissingFromData="yes">
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                <to>$CMGetProductSpecificationsIn.ProductSpecificationQuery/ns1:PlatformContext/ns1:Tenant</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ProductSpecificationId</from>
                                                                <to>$CMGetProductSpecificationsIn.ProductSpecificationQuery/ns1:ProductSpecificationId</to>
                                                            </copy>
                                                            <copy>
                                                                <from>'MAIN_PRODAVP'</from>
                                                                <to>$CMGetProductSpecificationsIn.ProductSpecificationQuery/ns1:Verbosity</to>
                                                            </copy>
                                                        </assign>
                                                        <invoke name="GetProductSpec" partnerLink="CM" operation="GetProductSpecifications" portType="ns5:CMSoap" inputVariable="CMGetProductSpecificationsIn" outputVariable="CMGetProductSpecificationsOut"/>
                                                        <assign>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                <to>$POSGetSalesIn.SalesQuery/ns7:PlatformContext/ns7:TxId</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                                <to>$POSGetSalesIn.SalesQuery/ns7:PlatformContext/ns7:OriginatingIdentity</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                <to>$POSGetSalesIn.SalesQuery/ns7:PlatformContext/ns7:OriginatingIP</to>
                                                            </copy>
                                                            <copy ignoreMissingFromData="yes">
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                <to>$POSGetSalesIn.SalesQuery/ns7:PlatformContext/ns7:Tenant</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value</from>
                                                                <to>$POSGetSalesIn.SalesQuery/ns7:SerialNumber</to>
                                                            </copy>
                                                        </assign>
                                                        <invoke name="GetSaleForICCID" partnerLink="POS" operation="GetSales" xmlns:tns="http://xml.smilecoms.com/POS" portType="tns:POSSoap" inputVariable="POSGetSalesIn" outputVariable="POSGetSalesOut"/>
                                                        <assign name="AssignSalesCount">
                                                            <sxt:trace>
                                                                <sxt:log level="finest" location="onComplete">
                                                                    <from>concat('Number of sales is ', $Counter, ' and the last sale has status ', $POSGetSalesOut.SalesList/ns7:Sales[$Counter]/ns7:Status, ' and recipient customer id ', $POSGetSalesOut.SalesList/ns7:Sales[$Counter]/ns7:RecipientCustomerId)</from>
                                                                </sxt:log>
                                                            </sxt:trace>
                                                            <copy>
                                                                <from>$POSGetSalesOut.SalesList/ns7:NumberOfSales</from>
                                                                <to>$Counter</to>
                                                            </copy>     
                                                        </assign>
                                                        <if name="IfHasASale">
                                                            <condition>$Counter &gt; 0</condition>
                                                            <sequence name="Sequence407">
                                                                <assign name="AssignSIMsSaleId">
                                                                    <sxt:trace>
                                                                        <sxt:log level="finest" location="onComplete">
                                                                            <from>concat('The SIMs sale id is ', $SIMSaleSaleId)</from>
                                                                        </sxt:log>
                                                                    </sxt:trace>
                                                                    <copy>
                                                                        <from>$POSGetSalesOut.SalesList/ns7:Sales[$Counter]/ns7:SaleId</from>
                                                                        <to>$SIMSaleSaleId</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$POSGetSalesOut.SalesList/ns7:Sales[$Counter]/ns7:PromotionCode</from>
                                                                        <to>$SIMSalePromoCode</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>$POSGetSalesOut.SalesList/ns7:Sales[$Counter]/ns7:SaleDate</from>
                                                                        <to>$SIMSaleDate</to>
                                                                    </copy>
                                                                </assign>
                                                            </sequence>
                                                            <else>
                                                                <assign name="AssignZeroSaleId">
                                                                    <sxt:trace>
                                                                        <sxt:log level="finest" location="onComplete">
                                                                            <from>'The SIM has no sale'</from>
                                                                        </sxt:log>
                                                                    </sxt:trace>
                                                                    <copy>
                                                                        <from>0</from>
                                                                        <to>$SIMSaleSaleId</to>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>''</from>
                                                                        <to>$SIMSalePromoCode</to>
                                                                    </copy>
                                                                </assign>
                                                            </else>
                                                        </if>
                                                        <if name="IfNoPaidSale">
                                                            <!-- we look at the status of the last sale the SIM was in. Allow ICCIDs that start with 0 for voice dummy SIMs -->
                                                            <condition>not(starts-with($POSGetSalesIn.SalesQuery/ns7:SerialNumber, '0')) and BPELUtils:getProperty('env.is.training.environment') = 'false' and BPELUtils:getAVPValueAsStringEmptyIfMissing($CMGetProductSpecificationsOut.ProductSpecificationList/ns1:ProductSpecifications, 'AllowedSIMSaleStatuses') != '' and ($Counter = 0 or not(contains(BPELUtils:getAVPValueAsString($CMGetProductSpecificationsOut.ProductSpecificationList/ns1:ProductSpecifications, 'AllowedSIMSaleStatuses'), $POSGetSalesOut.SalesList/ns7:Sales[$Counter]/ns7:Status)))</condition>
                                                            <sequence name="SequenceNoSale">
                                                                <if name="CanIgnorePPSale">
                                                                    <condition>$POSGetSalesOut.SalesList/ns7:Sales[$Counter]/ns7:Status = 'PP' and $SCAProcessOrderIn.ProductOrder/ns0:AllowPendingSIMSale</condition>
                                                                    <sequence name="SequenceIgnore">
                                                                        <empty/>
                                                                    </sequence>
                                                                    <else>
                                                                        <sequence name="SequenceAssignNoSaleForSIM">
                                                                            <assign name="AssignNoSaleForSIM">
                                                                                <copy>
                                                                                    <from>'A SIM Cannot be provisioned with this product unless it has been through the sales process'</from>
                                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>'business'</from>
                                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>'SCA-0011'</from>
                                                                                    <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                                                </copy>
                                                                            </assign>
                                                                        </sequence>
                                                                    </else>
                                                                </if>
                                                                <reply name="ReplySIMNotSold" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                                <exit name="ExitWithErrNoSaleForSIM"/>
                                                            </sequence>
                                                        </if>
                                                        <if name="IfSaleFound">
                                                            <condition>$SIMSaleSaleId &gt; 0</condition>
                                                            <if name="IfSaleHasSIMSwapPromoCode">
                                                                <!-- As per business rule - We must prevent false sales. I.e. SIM swap SIMs must be used in SIM swaps. Only allow 2 days after SIM swap -->
                                                                <condition>contains($SIMSalePromoCode, 'SIMSwap') and BPELUtils:getSecondsBetweenNowAndDate($SIMSaleDate) &lt; 2 * 3600 * 24</condition>
                                                                <sequence name="SequenceSIMSwapSale">
                                                                    <assign name="AssignSIMSwapSaleCannotBeProvisioned">
                                                                        <copy>
                                                                            <from>'A SIM Sold for a SIM swap cannot have a new product provisioned on it'</from>
                                                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>'business'</from>
                                                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                                        </copy>
                                                                        <copy>
                                                                            <from>'SCA-0023'</from>
                                                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                                        </copy>
                                                                    </assign>
                                                                    <reply name="ReplySIMSwapSaleCannotBeProvisioned" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                                    <exit name="ExitWithErrSIMSwapSaleCannotBeProvisioned"/>
                                                                </sequence>
                                                            </if>
                                                        </if>
                                                    </sequence>
                                                </if>
                                            </sequence>
                                        </if> <!-- END If ICCID -->
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        <if name="If_PublicIdentity">
                                            <condition>not($ValidatedPhoneNumber) and $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Attribute = 'PublicIdentity'</condition>
                                            <sequence name="Verify_Phone_Number">
                                                
                                                <if name="If_Create">
                                                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create'</condition>
                                                    <sequence name="Verify_Phone_Number_For_Create">
                                                        <assign name="Assign_Must_Check1">
                                                            <copy>
                                                                <from>true()</from>
                                                                <to variable="MustVerifyPhoneNumber"/>
                                                            </copy>
                                                        </assign>
                                                    </sequence>
                                                    <elseif>
                                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                                        <sequence name="Sequence_Verify_Changed_Number">
                                                            <assign name="Assign_Get_Current_IMPU">
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:TxId</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'getServiceInstances'</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Method</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:OriginatingIdentity</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:OriginatingIP</to>
                                                                </copy>
                                                                <copy ignoreMissingFromData="yes">
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Tenant</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Roles</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:SCAContext/ns0:Roles</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:ServiceInstanceId</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'MAIN_SVCAVP'</from>
                                                                    <to>$SCACallingGetServiceInstancesIn.ServiceInstanceQuery/ns0:Verbosity</to>
                                                                </copy>
                                                            </assign>
                                                            <invoke name="Get_SI" partnerLink="SCACalling" operation="GetServiceInstances" portType="tns:SCASoap" inputVariable="SCACallingGetServiceInstancesIn" outputVariable="SCACallingGetServiceInstancesOut">
                                                                <sxt:trace>
                                                                    <sxt:log level="finest" location="onComplete">
                                                                        <from>concat('This service instance currently has a public identity of ', BPELUtils:getAVPValueAsString($SCACallingGetServiceInstancesOut.ServiceInstanceList/ns0:ServiceInstances, 'PublicIdentity'), ' and is being changed to ', $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value)</from>
                                                                    </sxt:log>
                                                                </sxt:trace>
                                                            </invoke>
                                                            <if name="If_Changed_Number">
                                                                <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value != BPELUtils:getAVPValueAsString($SCACallingGetServiceInstancesOut.ServiceInstanceList/ns0:ServiceInstances, 'PublicIdentity')</condition>
                                                                <assign name="Assign_Must_Check2">
                                                                    <copy>
                                                                        <from>true()</from>
                                                                        <to variable="MustVerifyPhoneNumber"/>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>BPELUtils:getAVPValueAsString($SCACallingGetServiceInstancesOut.ServiceInstanceList/ns0:ServiceInstances, 'PublicIdentity')</from>
                                                                        <to variable="OriginalPublicIdentity"/>
                                                                    </copy>
                                                                </assign>
                                                            </if>
                                                        </sequence>
                                                    </elseif>
                                                </if>
                                                <if name="If_Must_Verify_Phone_Number">
                                                    <condition>$MustVerifyPhoneNumber</condition>
                                                    <sequence name="Sequence40492">
                                                        <scope name="CheckPhoneNumberScope">
                                                            <variables>
                                                                <variable name="AMGetAvailableNumbersOut" xmlns:tns="http://xml.smilecoms.com/AM" messageType="tns:GetAvailableNumbersResponse"/>
                                                                <variable name="AMGetAvailableNumbersIn" xmlns:tns="http://xml.smilecoms.com/AM" messageType="tns:GetAvailableNumbersRequest"/>
                                                            </variables>
                                                            <sequence name="Sequence1302">
                                                                <assign name="AssignPhoneNumber">
                                                                    <sxt:trace>
                                                                        <sxt:log level="finest" location="onComplete">
                                                                            <from>concat('Checking if Phone Number is available: ', $PublicIdentity)</from>
                                                                        </sxt:log>
                                                                    </sxt:trace>
                                                                    <copy>
                                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value</from>
                                                                        <to variable="PublicIdentity"/>
                                                                    </copy>
                                                                    <copy>
                                                                        <from>true()</from>
                                                                        <to variable="ValidatedPhoneNumber"/>
                                                                    </copy>
                                                                </assign>
                                                                <if name="IfNegativeOne">
                                                                    <condition>$PublicIdentity = '-1'</condition>
                                                                    <sequence name="GetFreeNumberSeq">
                                                                        <assign name="AssignGetFreeNumber">
                                                                            <copy>
                                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:TxId</to>
                                                                            </copy>
                                                                            <copy>
                                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:OriginatingIdentity</to>
                                                                            </copy>
                                                                            <copy>
                                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:OriginatingIP</to>
                                                                            </copy>
                                                                            <copy ignoreMissingFromData="yes">
                                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:Tenant</to>
                                                                            </copy>
                                                                            <copy ignoreMissingFromData="yes">
                                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Comment</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:Comment</to>
                                                                            </copy>
                                                                            <copy>
                                                                                <from>0</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:OwnedByCustomerProfileId</to>
                                                                            </copy>
                                                                            <copy>
                                                                                <from>0</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:OwnedByOrganisationId</to>
                                                                            </copy>
                                                                            <copy>
                                                                                <from>0</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PriceLimitCents</to>
                                                                            </copy>
                                                                            <copy>
                                                                                <from>1</from>
                                                                                <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:ResultLimit</to>
                                                                            </copy>
                                                                        </assign>
                                                                        <invoke name="GetFreeNumber" partnerLink="AM" operation="GetAvailableNumbers" xmlns:tns="http://xml.smilecoms.com/AM" portType="tns:AMSoap" inputVariable="AMGetAvailableNumbersIn" outputVariable="AMGetAvailableNumbersOut"/>
                                                                        <assign name="AssignNumber">
                                                                            <copy>
                                                                                <from>$AMGetAvailableNumbersOut.AvailableNumbersResult/ns8:Numbers/ns8:IMPU</from>
                                                                                <to variable="PublicIdentity"/>
                                                                            </copy>
                                                                        </assign>
                                                                        <assign name="SetNumber">
                                                                            <copy>
                                                                                <from>$PublicIdentity</from>
                                                                                <to>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$copyAVP]/ns0:Value</to>
                                                                            </copy>
                                                                        </assign>
                                                                    </sequence>
                                                                    <else>
                                                                        <sequence name="Sequence40493">
                                                                            <assign name="AssignGetNumber">
                                                                                <copy>
                                                                                    <from variable="PublicIdentity"/>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:Pattern</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>1</from>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:ResultLimit</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>1000000000</from>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PriceLimitCents</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:TxId</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:OriginatingIdentity</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:OriginatingIP</to>
                                                                                </copy>
                                                                                <copy ignoreMissingFromData="yes">
                                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:PlatformContext/ns8:Tenant</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>-1</from>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:OwnedByCustomerProfileId</to>
                                                                                </copy>
                                                                                <copy>
                                                                                    <from>-1</from>
                                                                                    <to>$AMGetAvailableNumbersIn.AvailableNumberQuery/ns8:OwnedByOrganisationId</to>
                                                                                </copy>
                                                                            </assign>
                                                                            <invoke name="CheckPhoneNumber" partnerLink="AM" operation="GetAvailableNumbers" xmlns:tns="http://xml.smilecoms.com/AM" portType="tns:AMSoap" inputVariable="AMGetAvailableNumbersIn" outputVariable="AMGetAvailableNumbersOut"/>
                                                                            <if name="IfNoNumber">
                                                                                <condition>$AMGetAvailableNumbersOut.AvailableNumbersResult/ns8:NumberOfNumbers != 1 or $AMGetAvailableNumbersOut.AvailableNumbersResult/ns8:Numbers/ns8:IMPU != $PublicIdentity or $AMGetAvailableNumbersOut.AvailableNumbersResult/ns8:Numbers/ns8:OwnedByCustomerProfileId &gt; 0 and $AMGetAvailableNumbersOut.AvailableNumbersResult/ns8:Numbers/ns8:OwnedByCustomerProfileId != $SCAProcessOrderIn.ProductOrder/ns0:CustomerId or $AMGetAvailableNumbersOut.AvailableNumbersResult/ns8:Numbers/ns8:OwnedByOrganisationId &gt; 0 and $AMGetAvailableNumbersOut.AvailableNumbersResult/ns8:Numbers/ns8:OwnedByOrganisationId != $SCAProcessOrderIn.ProductOrder/ns0:OrganisationId
                                                                                </condition>
                                                                                <sequence name="PhoneNumberNotavailable">
                                                                                    <assign name="AssignPhoneNumberNotAvailable">
                                                                                        <copy>
                                                                                            <from>'The requested phone number is not available'</from>
                                                                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                                                        </copy>
                                                                                        <copy>
                                                                                            <from>'business'</from>
                                                                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                                                        </copy>
                                                                                        <copy>
                                                                                            <from>'SCA-0025'</from>
                                                                                            <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                                                        </copy>
                                                                                    </assign>
                                                                                    <reply name="ReplyPhoneNumberNotAvailable" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                                                    <exit name="ExitPhoneNumberNotAvailable"/>
                                                                                </sequence>
                                                                            </if>
                                                                        </sequence>
                                                                    </else>
                                                                </if>
                                                            </sequence>
                                                        </scope>
                                                    </sequence>
                                                </if>
                                            </sequence>
                                        </if> <!-- END If Phone Number (Public Identity) -->
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                    </sequence>
                                </scope>
                            </forEach> <!-- END looping through AVPs -->
                        </sequence>
                    </sequence>
                </scope>
            </forEach> <!-- END looping through Service Instance Orders -->
        </sequence>
        <!-- END - Repopulate the AVPs on the PI and SI's using the product and service specs along with the AVPs passed in the Order-->
        
       
       
       
       
       
       
       
        <!-- START - Validate that the Device/SIM Serial Number is located with the sales person organisation -->
        
        
        <if name="IfDeviceSerialProvided">
            <condition>count($SCAProcessOrderIn.ProductOrder/ns0:DeviceSerialNumber) != 0 and $SCAProcessOrderIn.ProductOrder/ns0:DeviceSerialNumber != ''</condition>
            <sequence name="Sequence4043">
                <assign name="AssignGetDeviceStockLocation">
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:PlatformContext/ns7:TxId</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:PlatformContext/ns7:OriginatingIdentity</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:PlatformContext/ns7:OriginatingIP</to>
                    </copy>
                    <copy ignoreMissingFromData="yes">
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:PlatformContext/ns7:Tenant</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:DeviceSerialNumber</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:SerialNumber</to>
                    </copy>
                </assign>
                <invoke name="GetDeviceStockLocation" partnerLink="POS" operation="GetSoldStockLocations" xmlns:tns="http://xml.smilecoms.com/POS" portType="tns:POSSoap" inputVariable="POSGetSoldStockLocationsIn" outputVariable="POSGetSoldStockLocationsOut"/>
          
                <if name="IfNotCorrectDeviceOwner">
                    <condition>$POSGetSoldStockLocationsOut.SoldStockLocationList/ns7:SoldStockLocations/ns7:HeldByOrganisationId != $CreatedByOrgId</condition>
                    <sequence name="Sequence4049">
                        <assign name="NotCorrectDeviceOwner">
                            <copy>
                                <from>'The device is not held by the selling organisation'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                            </copy>
                            <copy>
                                <from>'business'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                            </copy>
                            <copy>
                                <from>'SCA-0033'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                            </copy>
                        </assign>
                        <reply name="ReplyNotCorrectDeviceOwner" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                        <exit name="ExitWithErrNotCorrectDeviceOwner"/>
                    </sequence>
                </if>
            </sequence>
        </if>
        <if name="IfKitProvided">
            <condition>count($SCAProcessOrderIn.ProductOrder/ns0:KitItemNumber) != 0 and $SCAProcessOrderIn.ProductOrder/ns0:KitItemNumber != ''</condition>
            <sequence name="Sequence4051">
                <assign name="AssignGetSIMStockLocation">
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:PlatformContext/ns7:TxId</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:PlatformContext/ns7:OriginatingIdentity</to>
                    </copy>
                    <copy>
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:PlatformContext/ns7:OriginatingIP</to>
                    </copy>
                    <copy ignoreMissingFromData="yes">
                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:PlatformContext/ns7:Tenant</to>
                    </copy>
                    <copy>
                        <from>$ICCID</from>
                        <to>$POSGetSoldStockLocationsIn.SoldStockLocationQuery/ns7:SerialNumber</to>
                    </copy>
                </assign>
                <invoke name="GetSIMStockLocation" partnerLink="POS" operation="GetSoldStockLocations" xmlns:tns="http://xml.smilecoms.com/POS" portType="tns:POSSoap" inputVariable="POSGetSoldStockLocationsIn" outputVariable="POSGetSoldStockLocationsOut"/>
          
                <if name="IfNotCorrectSIMOwner">
                    <condition>$POSGetSoldStockLocationsOut.SoldStockLocationList/ns7:SoldStockLocations/ns7:HeldByOrganisationId != $CreatedByOrgId</condition>
                    <sequence name="Sequence4055">
                        <assign name="NotCorrectSIMOwner">
                            <copy>
                                <from>'The SIM is not held by the selling organisation'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                            </copy>
                            <copy>
                                <from>'business'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                            </copy>
                            <copy>
                                <from>'SCA-0035'</from>
                                <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                            </copy>
                        </assign>
                        <reply name="ReplyNotCorrectSIMOwner" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                        <exit name="ExitWithErrNotCorrectSIMOwner"/>
                    </sequence>
                </if>
                
            </sequence>
        </if>
        
        <!-- END - Validate that the Device Serial Number is located with the sales person organisation -->
        
       
       
       
       
       
       
       
       
       
       
       
        <!-- START - Create required accounts and if accounts are provided in the order, then ensure they exist and can be used -->
        <sequence name="Account_Logic">
            <forEach name="ForEachSI_Loop1" parallel="no" counterName="SICounter">
                <sxt:trace>
                    <sxt:log level="finest" location="onStart">
                        <from>'Going to loop through service instance provisioning requests checking if an account must be created'</from>
                    </sxt:log>
                </sxt:trace>
                <startCounterValue>1</startCounterValue>
                <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders)</finalCounterValue>
                <scope name="Account_Scope">
                    <variables>
                        <variable name="CMGetServiceInstancesOut" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:ServiceInstancesResponse"/>
                        <variable name="CMGetServiceInstancesIn" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:GetServiceInstancesRequest"/>
                        <variable name="BMGetAccountsOut" xmlns:tns="http://xml.smilecoms.com/BM" messageType="tns:GetAccountsResponse"/>
                        <variable name="BMGetAccountsIn" xmlns:tns="http://xml.smilecoms.com/BM" messageType="tns:GetAccountsRequest"/>
                    </variables>
                    <if name="IfAccountIdIsMinusOne">
                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId = -1</condition>
                        <sequence name="CreateAccountIfNotDoneSo">
                            <if name="IfDefaultAccountIdIsMinusOne">
                                <condition>$DefaultAccountId = -1</condition>
                                <scope name="CS_Create_account">
                                    <variables>
                                        <variable name="BMDeleteAccountOut" messageType="ns4:Done"/>
                                        <variable name="BMDeleteAccountIn" messageType="ns4:DeleteAccountRequest"/>
                                        <variable name="BMCreateAccountOut" messageType="ns4:AccountResponse"/>
                                        <variable name="BMCreateAccountIn" messageType="ns4:CreateAccountRequest"/>
                                    </variables>
                                    <compensationHandler>
                                        <sequence name="Sequence128">
                                            <scope name="Scope69">
                                                <faultHandlers>
                                                    <catchAll>
                                                        <empty name="Empty2"/>
                                                    </catchAll>
                                                </faultHandlers>
                                                <sequence name="Sequence410">
                                                    <assign name="AssignDelete">
                                                        <copy>
                                                            <from variable="DefaultAccountId"/>
                                                            <to>$BMDeleteAccountIn.DeleteAccountRequest/ns2:Long</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                            <to>$BMDeleteAccountIn.DeleteAccountRequest/ns2:PlatformContext/ns2:TxId</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                            <to>$BMDeleteAccountIn.DeleteAccountRequest/ns2:PlatformContext/ns2:OriginatingIdentity</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                            <to>$BMDeleteAccountIn.DeleteAccountRequest/ns2:PlatformContext/ns2:OriginatingIP</to>
                                                        </copy>
                                                        <copy ignoreMissingFromData="yes">
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                            <to>$BMDeleteAccountIn.DeleteAccountRequest/ns2:PlatformContext/ns2:Tenant</to>
                                                        </copy>
                                                    </assign>
                                                    <invoke name="DeleteAccount" partnerLink="BM" operation="DeleteAccount" portType="ns4:BMSoap" inputVariable="BMDeleteAccountIn" outputVariable="BMDeleteAccountOut"/>
                                                </sequence>
                                            </scope>
                                        </sequence>
                                    </compensationHandler>
                                    <sequence name="sequence20">
                                        <assign name="AssignBMAcc">
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                <to>$BMCreateAccountIn.CreateAccountRequest/ns2:PlatformContext/ns2:TxId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                <to>$BMCreateAccountIn.CreateAccountRequest/ns2:PlatformContext/ns2:OriginatingIdentity</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                <to>$BMCreateAccountIn.CreateAccountRequest/ns2:PlatformContext/ns2:OriginatingIP</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                <to>$BMCreateAccountIn.CreateAccountRequest/ns2:PlatformContext/ns2:Tenant</to>
                                            </copy>
                                        </assign>
                                        <invoke name="CreateAccount" partnerLink="BM" operation="CreateAccount" portType="ns4:BMSoap" inputVariable="BMCreateAccountIn" outputVariable="BMCreateAccountOut">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onComplete">
                                                    <from>concat('BM created an account with id: ', $BMCreateAccountOut.Account/ns2:AccountId)</from>
                                                </sxt:log>
                                            </sxt:trace>
                                        </invoke>
                                        <assign name="AssignDefaultAcc">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>concat('Assigning default account id to: ', $BMCreateAccountOut.Account/ns2:AccountId)</from>
                                                </sxt:log>
                                                <sxt:log level="finest" location="onComplete">
                                                    <from>concat('Assigned default Account id to: ', $DefaultAccountId, ' from ', $BMCreateAccountOut.Account/ns2:AccountId)</from>
                                                </sxt:log>
                                            </sxt:trace>
                                            <copy>
                                                <from>$BMCreateAccountOut.Account/ns2:AccountId</from>
                                                <to variable="DefaultAccountId"/>
                                            </copy>
                                        </assign>
                                    </sequence>
                                </scope>
                            </if>
                            <assign name="AssignAcc">
                                <sxt:trace>
                                    <sxt:log level="finest" location="onStart">
                                        <from>concat('Default Account Id is: ', $DefaultAccountId)</from>
                                    </sxt:log>
                                </sxt:trace>
                                <copy>
                                    <from variable="DefaultAccountId"/>
                                    <to>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId</to>
                                </copy>
                            </assign>
                        </sequence>
                        <else>
                            <sequence name="VerifyAccountExists">
                                <assign name="AssignAccount">
                                    <copy>
                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                        <to>$BMGetAccountsIn.AccountQuery/ns2:PlatformContext/ns2:TxId</to>
                                    </copy>
                                    <copy>
                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                        <to>$BMGetAccountsIn.AccountQuery/ns2:PlatformContext/ns2:OriginatingIdentity</to>
                                    </copy>
                                    <copy>
                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                        <to>$BMGetAccountsIn.AccountQuery/ns2:PlatformContext/ns2:OriginatingIP</to>
                                    </copy>
                                    <copy ignoreMissingFromData="yes">
                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                        <to>$BMGetAccountsIn.AccountQuery/ns2:PlatformContext/ns2:Tenant</to>
                                    </copy>
                                    <copy>
                                        <from>'ACCOUNT'</from>
                                        <to>$BMGetAccountsIn.AccountQuery/ns2:Verbosity</to>
                                    </copy>
                                    <copy>
                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId</from>
                                        <to>$BMGetAccountsIn.AccountQuery/ns2:AccountId</to>
                                    </copy>
                                </assign>
                                <invoke name="CallBMToVerifyAccount" partnerLink="BM" operation="GetAccounts" portType="ns4:BMSoap" inputVariable="BMGetAccountsIn" outputVariable="BMGetAccountsOut"/>
                                <if name="IfStatusDisallowsProvisioningChanges">
                                    <condition>BPELUtils:binaryAnd($BMGetAccountsOut.AccountList/ns2:Accounts/ns2:Status, 128) != 0</condition>
                                    <sequence name="SequenceIfIfStatusDisallowsProvisioningChanges">
                                        <assign name="AssignErrIfIfStatusDisallowsProvisioningChanges">
                                            <copy>
                                                <from>'Cannot modify a product on an account with this status'</from>
                                                <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                            </copy>
                                            <copy>
                                                <from>'business'</from>
                                                <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                            </copy>
                                            <copy>
                                                <from>'SCA-0027'</from>
                                                <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                            </copy>
                                        </assign>
                                        <reply name="ReplyErrIfIfStatusDisallowsProvisioningChanges" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                        <exit name="Exit55"/>
                                    </sequence>
                                </if>
                                <if name="IfNotDeleting">
                                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action != 'delete' and $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:Status != 'DE'</condition>
                                    <sequence name="Sequence41">                                        
                                        <if name="IfSpecialSvcAccHasBalance">
                                            <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create' and $BMGetAccountsOut.AccountList/ns2:Accounts/ns2:CurrentBalanceInCents &gt; 0 and $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceSpecificationId &gt;= 1000</condition>
                                            <sequence name="SequenceAssignErrSpecialHasBalance">
                                                <assign name="AssignErrSpecialHasBalance">
                                                    <copy>
                                                        <from>'A service with specification of 1000 or more cannot be associated to an account with a non-zero balance'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                    </copy>
                                                    <copy>
                                                        <from>'business'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                    </copy>
                                                    <copy>
                                                        <from>'SCA-0009'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                    </copy>
                                                </assign>
                                                <reply name="ReplyErrSpecialHasBalance" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                <exit name="Exit5"/>
                                            </sequence>
                                        </if>
                                        <if name="IfNonAdminUsingSystemAccount">
                                            <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId &lt; 1100000000 and $SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity != 'admin'</condition>
                                            <sequence name="SequenceAssignErrNonAdmin">
                                                <assign name="AssignErrNonAdmin">
                                                    <copy>
                                                        <from>'A system account can only be managed by the administrator'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                    </copy>
                                                    <copy>
                                                        <from>'business'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                    </copy>
                                                    <copy>
                                                        <from>'SCA-0010'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                    </copy>
                                                </assign>
                                                <reply name="ReplyErrNonAdmin" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                <exit name="Exit6"/>
                                            </sequence>
                                        </if>
                                        <assign name="AssignGetSI">
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId</from>
                                                <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:AccountId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:TxId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIP</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:Tenant</to>
                                            </copy>
                                            <copy>
                                                <from>'MAIN'</from>
                                                <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:Verbosity</to>
                                            </copy>
                                        </assign>
                                        <invoke name="GetExistingServicesOnAccount" partnerLink="CM" operation="GetServiceInstances" portType="ns5:CMSoap" inputVariable="CMGetServiceInstancesIn" outputVariable="CMGetServiceInstancesOut"/>
                                        <if name="IfTooManySpecialServices">
                                            <condition>$CMGetServiceInstancesOut.ServiceInstanceList/ns1:NumberOfServiceInstances &gt; 0 and ($CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances[1]/ns1:ServiceSpecificationId &gt;= 1000 or $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceSpecificationId &gt;= 1000) and $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId != $CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances[1]/ns1:ServiceInstanceId
                                            </condition>
                                            <sequence name="Sequence401">
                                                <assign name="AssignErrTooManySpecial">
                                                    <copy>
                                                        <from>'A service with specification of 1000 or more must be alone on an account'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorDesc</to>
                                                    </copy>
                                                    <copy>
                                                        <from>'business'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorType</to>
                                                    </copy>
                                                    <copy>
                                                        <from>'SCA-0005'</from>
                                                        <to>$Fault1FaultVar.SCAError/ns0:ErrorCode</to>
                                                    </copy>
                                                </assign>
                                                <reply name="ReplyTooManySpecialServices" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" faultName="tns:fault1" variable="Fault1FaultVar"/>
                                                <exit name="Exit4"/>
                                            </sequence>
                                        </if>
                                        <assign name="AssignDefaultAccId">
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId</from>
                                                <to variable="DefaultAccountId"/>
                                            </copy>
                                        </assign>
                                    </sequence>
                                </if>
                            </sequence>
                        </else>
                    </if>
                </scope>
            </forEach>
        </sequence>
        <!-- END - Create required accounts and if accounts are provided in the order, then ensure they exist and can be used -->
        
        
        
        
        
        
        
        <!-- START - Deal with the product instance. If its a create, then create it in CM. If its an update, then update it in CM -->
        <sequence name="Product_Instance_Logic">
            <if name="IfCreateProductInstance">
                <condition>$SCAProcessOrderIn.ProductOrder/ns0:Action = 'create'</condition>
                <sequence name="Sequence2">
                    <scope name="CS_CreatePI">
                        <variables>
                            <variable name="CMCreateProductInstanceOut" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:ProductInstanceResponse"/>
                            <variable name="CMCreateProductInstanceIn" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:CreateProductInstanceRequest"/>
                        </variables>
                        <compensationHandler>
                            <sequence name="Sequence129">
                                <scope name="Scope612">
                                    <faultHandlers>
                                        <catchAll>
                                            <empty name="Empty3"/>
                                        </catchAll>
                                    </faultHandlers>
                                    <sequence name="Sequence4042">
                                        <assign name="AssignDeletePI">
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:PlatformContext/ns1:TxId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:PlatformContext/ns1:OriginatingIP</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:PlatformContext/ns1:Tenant</to>
                                            </copy>
                                            <copy>
                                                <from>$CMCreateProductInstanceOut.ProductInstance/ns1:ProductInstanceId</from>
                                                <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:Integer</to>
                                            </copy>
                                        </assign>
                                        <invoke name="DeleteProductInstance" partnerLink="CM" operation="DeleteProductInstance" portType="ns5:CMSoap" inputVariable="CMDeleteProductInstanceIn" outputVariable="CMDeleteProductInstanceOut"/>
                                    </sequence>
                                </scope>
                            </sequence>
                        </compensationHandler>
                        <sequence name="Sequence14">
                            <assign name="AssignCreateProductInstance">
                                <sxt:trace>
                                    <sxt:log level="finest" location="onStart">
                                        <from>'Assigning data to create product instance'</from>
                                    </sxt:log>
                                    <sxt:log level="finest" location="onComplete">
                                        <from>'Finished assignment for create product'</from>
                                    </sxt:log>
                                </sxt:trace>
                                <copy>
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:PlatformContext/ns1:TxId</to>
                                </copy>
                                <copy>
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                </copy>
                                <copy>
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:PlatformContext/ns1:OriginatingIP</to>
                                </copy>
                                <copy ignoreMissingFromData="yes">
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:PlatformContext/ns1:Tenant</to>
                                </copy>
                                <copy>
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ProductSpecificationId</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:ProductSpecificationId</to>
                                </copy>
                                <copy>
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:CustomerId</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:CustomerId</to>
                                </copy>
                                <copy ignoreMissingFromData="yes">
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:OrganisationId</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:OrganisationId</to>
                                </copy>
                                <copy>
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:Segment</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:Segment</to>
                                </copy>
                                <copy ignoreMissingFromData="yes">
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:PromotionCode</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:PromotionCode</to>
                                </copy>
                                <copy ignoreMissingFromData="yes">
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:FriendlyName</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:FriendlyName</to>
                                </copy>
                                <copy ignoreMissingFromData="yes">
                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ReferralCode</from>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:ReferralCode</to>
                                </copy>
                                <copy ignoreMissingFromData="yes">
                                    <from variable="ICCID"/>
                                    <to>$CMCreateProductInstanceIn.NewProductInstance/ns1:PhysicalId</to>
                                </copy>
                            </assign>
                            <invoke name="CreateProductInstance" partnerLink="CM" operation="CreateProductInstance" xmlns:tns="http://xml.smilecoms.com/CM" portType="tns:CMSoap" inputVariable="CMCreateProductInstanceIn" outputVariable="CMCreateProductInstanceOut">
                                <sxt:trace>
                                    <sxt:log level="finest" location="onStart">
                                        <from>'Going to create product instance'</from>
                                    </sxt:log>
                                </sxt:trace>
                            </invoke>
                            <assign name="AssignPIId">
                                <copy>
                                    <from>$CMCreateProductInstanceOut.ProductInstance/ns1:ProductInstanceId</from>
                                    <to>$SCAProcessOrderIn.ProductOrder/ns0:ProductInstanceId</to>
                                </copy>
                                <copy>
                                    <from>$CMCreateProductInstanceOut.ProductInstance/ns1:ProductInstanceId</from>
                                    <to>$SIMProductInstanceId</to>
                                </copy>
                            </assign>
                        </sequence>
                    </scope>
                </sequence>
                <elseif>
                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:Action = 'update'</condition>
                    <sequence name="Sequence127">
                        <assign name="AssignUpdatePI">
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:PlatformContext/ns1:TxId</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:PlatformContext/ns1:OriginatingIP</to>
                            </copy>
                            <copy ignoreMissingFromData="yes">
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:PlatformContext/ns1:Tenant</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ProductInstanceId</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:ProductInstanceId</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:CustomerId</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:CustomerId</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:OrganisationId</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:OrganisationId</to>
                            </copy>
                            <copy ignoreMissingFromData="yes">
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:Segment</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:Segment</to>
                            </copy>
                            <copy ignoreMissingFromData="yes">
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:FriendlyName</from>
                                <to>$CMUpdateProductInstanceIn.ProductInstance/ns1:FriendlyName</to>
                            </copy>
                        </assign>
                        <invoke name="UpdateProductInstance" partnerLink="CM" operation="UpdateProductInstance" portType="ns5:CMSoap" inputVariable="CMUpdateProductInstanceIn" outputVariable="CMUpdateProductInstanceOut"/>
                        <assign name="UseResult">
                            <copy>
                                <from>$CMUpdateProductInstanceOut.Done/ns1:Done</from>
                                <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                            </copy>
                        </assign>
                    </sequence>
                </elseif>
            </if>
        </sequence>
        <!-- END - Deal with the product instance. If its a create, then create it in CM. If its an update, then update it in CM -->
        
        
        
        
        
        
        
        
        <!-- START - Deal with the service instances. Loop though each and decide how to create/update/delete it -->
        <sequence name="Service_Instance_Logic">
            <forEach name="ForEachSI_Loop3" parallel="no" counterName="SICounter">
                <sxt:trace>
                    <sxt:log level="finest" location="onStart">
                        <from>'Going to loop through service instance provisioning requests and create/update/delete each one'</from>
                    </sxt:log>
                </sxt:trace>
                <startCounterValue>1</startCounterValue>
                <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders)</finalCounterValue>
                <scope name="SILoop">
                    <variables>
                        <variable name="SubFlowDeleteVoiceServiceOut" messageType="ns3:Done"/>
                        <variable name="SubFlowDeleteVoiceServiceIn" messageType="ns3:DeleteVoiceServiceRequest"/>
                        <variable name="IMGetIMSPrivateIdentityOut" xmlns:tns="http://xml.smilecoms.com/IM" messageType="tns:GetIMSPrivateIdentityResponse"/>
                        <variable name="IMGetIMSPrivateIdentityIn" xmlns:tns="http://xml.smilecoms.com/IM" messageType="tns:GetIMSPrivateIdentityRequest"/>
                        <variable name="CMGetServiceInstancesOut" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:ServiceInstancesResponse"/>
                        <variable name="CMGetServiceInstancesIn" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:GetServiceInstancesRequest"/>
                        <variable name="SubFlowDeleteLTEServiceOut" messageType="ns3:Done"/>
                        <variable name="SubFlowDeleteLTEServiceIn" messageType="ns3:DeleteLTEServiceRequest"/>
                        <variable name="CMCreateServiceInstanceOut" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:ServiceInstanceResponse"/>
                        <variable name="CMCreateServiceInstanceIn" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:CreateServiceInstanceRequest"/>
                        <variable name="RemoteResourceId" type="xs:string"/>
                        <variable name="MustAddChargingIdentifiers" type="xsd:boolean"/>
                        <variable name="ChargingIdentifiers" type="ns3:ChargingIdentifierList"/>
                        <variable name="SubFlowDeleteWLANServiceOut" messageType="ns3:Done"/>
                        <variable name="SubFlowDeleteWLANServiceIn" messageType="ns3:DeleteWLANServiceRequest"/>
                    </variables>
                    <sequence name="SI_Sequence">
                        <assign name="AssignDefaultsForSI">
                            <copy>
                                <from>''</from>
                                <to variable="RemoteResourceId"/>
                            </copy>
                            <copy>
                                <from>false()</from>
                                <to variable="MustAddChargingIdentifiers"/>
                            </copy>
                        </assign>
                        
                        <if name="MustSetSIStatusToTD">
                            <condition>$MustSetServicesAsTD</condition>
                            <sequence name="SeqSetStatus">
                                <assign name="AssignTDStatus">
                                    <sxt:trace>
                                        <sxt:log level="finest" location="onStart">
                                            <from>'The customer classification is not customer so the service status is being set to TD'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                    <copy>
                                        <from>'TD'</from>
                                        <to>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:Status</to>
                                    </copy>
                                </assign>
                            </sequence>
                        </if>
                        
                        <!-- START - Do something specific depending on the service type -->
                        <!-- START - This is an LTE service -->
                        <if name="ServiceSpecificProvisioning">
                            <condition>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'ProvisioningFlow') = 'lte'</condition>
                            <sequence name="LTE">
                                <sxt:trace>
                                    <sxt:log level="finest" location="onStart">
                                        <from>'ProvisioningFlow is lte'</from>
                                    </sxt:log>
                                </sxt:trace>
                                <if name="If_LTE_CUD">
                                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create'</condition>
                                    <sequence name="LTE_Creation">
                                        <sxt:trace>
                                            <sxt:log level="finest" location="onStart">
                                                <from>'Doing provisioning for LTE Creation'</from>
                                            </sxt:log>
                                        </sxt:trace>
                                        <scope name="CS_LTECreation">
                                            <variables>
                                                <variable name="SubFlowProvisionLTEServiceOut" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionServiceResponse"/>
                                                <variable name="SubFlowProvisionLTEServiceIn" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionLTEServiceRequest"/>
                                            </variables>                                           
                                            <sequence name="Sequence21">
                                                <assign name="AssignLTEData">
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                        <to>$SubFlowProvisionLTEServiceIn.LTEServiceData/SubFlowContext/TxId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                        <to>$SubFlowProvisionLTEServiceIn.LTEServiceData/SubFlowContext/OriginatingIdentity</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                        <to>$SubFlowProvisionLTEServiceIn.LTEServiceData/SubFlowContext/OriginatingIP</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                        <to>$SubFlowProvisionLTEServiceIn.LTEServiceData/SubFlowContext/Tenant</to>
                                                    </copy>
                                                </assign>
                                                <forEach name="ForEachAVP" parallel="no" counterName="avp">
                                                    <startCounterValue>1</startCounterValue>
                                                    <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                                    <scope name="Scope6">
                                                        <assign name="AssignAttributeAndValue">
                                                            <sxt:trace>
                                                                <sxt:log level="finest" location="onStart">
                                                                    <from>concat('Copying AVPs. AVPAttribute:', $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute, ' Value:', $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value)</from>
                                                                </sxt:log>
                                                            </sxt:trace>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute</from>
                                                                <to>$SubFlowProvisionLTEServiceIn.LTEServiceData/ServiceAVPs[$avp]/ns0:Attribute</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value</from>
                                                                <to>$SubFlowProvisionLTEServiceIn.LTEServiceData/ServiceAVPs[$avp]/ns0:Value</to>
                                                            </copy>
                                                        </assign>
                                                    </scope>
                                                </forEach>
                                                <assign name="AssignStatusForCreation">
                                                    <copy>
                                                        <from>'Status'</from>
                                                        <to>$SubFlowProvisionLTEServiceIn.LTEServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 1]/ns0:Attribute</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:Status</from>
                                                        <to>$SubFlowProvisionLTEServiceIn.LTEServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 1]/ns0:Value</to>
                                                    </copy>
                                                </assign>
                                                <invoke name="ProvisionLTE" partnerLink="SCASubFlows" operation="ProvisionLTEService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowProvisionLTEServiceIn" outputVariable="SubFlowProvisionLTEServiceOut"/>
                                                <assign name="AssignLTEResults">
                                                    <copy>
                                                        <from>$SubFlowProvisionLTEServiceOut.ProvisionedServiceData/ResourceId</from>
                                                        <to variable="RemoteResourceId"/>
                                                    </copy>                                                    
                                                </assign>
                                            </sequence>
                                        </scope>
                                    </sequence>
                                    <elseif>
                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                        <sequence name="LTE_Update">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>'Doing updating of LTE Service'</from>
                                                </sxt:log>
                                            </sxt:trace>
                                            <scope name="CS_LTEUpdate">
                                                <variables>
                                                    <variable name="SubFlowModifyLTEServiceOut" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionServiceResponse"/>
                                                    <variable name="SubFlowModifyLTEServiceIn" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ModifyLTEServiceRequest"/>
                                                </variables>                                           
                                                <sequence name="Sequence21">
                                                    <assign name="AssignLTEDataForUpdate">
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                            <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/SubFlowContext/TxId</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                            <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/SubFlowContext/OriginatingIdentity</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                            <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/SubFlowContext/OriginatingIP</to>
                                                        </copy>
                                                        <copy ignoreMissingFromData="yes">
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                            <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/SubFlowContext/Tenant</to>
                                                        </copy>
                                                    </assign>
                                                    <forEach name="ForEachAVPToModify" parallel="no" counterName="avp">
                                                        <startCounterValue>1</startCounterValue>
                                                        <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                                        <scope name="Scope66">
                                                            <assign name="AssignAttributeAndValueForModify">
                                                                <sxt:trace>
                                                                    <sxt:log level="finest" location="onStart">
                                                                        <from>concat('Copying AVPs. AVPAttribute:', $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute, ' Value:', $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value)</from>
                                                                    </sxt:log>
                                                                </sxt:trace>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute</from>
                                                                    <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/ServiceAVPs[$avp]/ns0:Attribute</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value</from>
                                                                    <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/ServiceAVPs[$avp]/ns0:Value</to>
                                                                </copy>
                                                            </assign>
                                                        </scope>
                                                    </forEach>
                                                    
                                                    
                                                    <if name="If_KYC_Complete">
                                                        <condition>BPELUtils:getAVPValueAsStringEmptyIfMissing($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'KYCStatus') = 'Complete'</condition>
                                                        <sequence name="KYC_Complete">
                                                            <assign name="AssignStatusAC">
                                                                <copy>
                                                                    <from>'Status'</from>
                                                                    <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 1]/ns0:Attribute</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'AC'</from>
                                                                    <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 1]/ns0:Value</to>
                                                                </copy>
                                                            </assign>
                                                        </sequence>
                                                        <else>
                                                            <sequence name="KYC_Not_Mentioned">
                                                                <assign name="AssignStatusOfSI">
                                                                    <copy>
                                                                        <from>'Status'</from>
                                                                        <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 1]/ns0:Attribute</to>
                                                                    </copy>
                                                                    <copy ignoreMissingFromData="yes">
                                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:Status</from>
                                                                        <to>$SubFlowModifyLTEServiceIn.ModifiedLTEServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 1]/ns0:Value</to>
                                                                    </copy>
                                                                </assign>
                                                            </sequence>
                                                        </else>
                                                    </if>
                                                    <invoke name="ModifyLTE" partnerLink="SCASubFlows" operation="ModifyLTEService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowModifyLTEServiceIn" outputVariable="SubFlowModifyLTEServiceOut"/>
                                                    <assign name="AssignModifyLTEResults">
                                                        <copy>
                                                            <from>$SubFlowModifyLTEServiceOut.ProvisionedServiceData/ResourceId</from>
                                                            <to variable="RemoteResourceId"/>
                                                        </copy>                                                    
                                                    </assign>
                                                </sequence>
                                            </scope>
                                        </sequence>
                                    </elseif>
                                    <elseif>
                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'delete'</condition>
                                        <sequence name="LTE_Deletion">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>'Doing provisioning for LTE Deletion'</from>
                                                </sxt:log>
                                            </sxt:trace>
                                            <assign name="AssignGetRemoteResourceId">
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:ServiceInstanceId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:Tenant</to>
                                                </copy>
                                                <copy>
                                                    <from>'MAIN'</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:Verbosity</to>
                                                </copy>
                                            </assign>
                                            <invoke name="GetRemoteResourceId" partnerLink="CM" operation="GetServiceInstances" portType="ns5:CMSoap" inputVariable="CMGetServiceInstancesIn" outputVariable="CMGetServiceInstancesOut"/>
                                            <assign name="AssignDeletion">
                                                <copy>
                                                    <from>$CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances[1]/ns1:RemoteResourceId</from>
                                                    <to>$SubFlowDeleteLTEServiceIn.LTEServiceDeletionInfo/RemoteResourceId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$SubFlowDeleteLTEServiceIn.LTEServiceDeletionInfo/SubFlowContext/TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$SubFlowDeleteLTEServiceIn.LTEServiceDeletionInfo/SubFlowContext/OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$SubFlowDeleteLTEServiceIn.LTEServiceDeletionInfo/SubFlowContext/OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$SubFlowDeleteLTEServiceIn.LTEServiceDeletionInfo/SubFlowContext/Tenant</to>
                                                </copy>
                                            </assign>
                                            <invoke name="DeleteLTE" partnerLink="SCASubFlows" operation="DeleteLTEService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowDeleteLTEServiceIn" outputVariable="SubFlowDeleteLTEServiceOut"/>
                                            <assign name="UseResult">
                                                <copy>
                                                    <from>$SubFlowDeleteLTEServiceOut.Done/Done</from>
                                                    <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                                                </copy>
                                            </assign>
                                        </sequence>
                                    </elseif>
                                </if>
                                
                                <if name="If_LTEAccess_CU" >
                                    <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create' or $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                    <sequence name="LTE_Create_Or_Update">
                                        <sxt:trace>
                                            <sxt:log level="finest" location="onStart">
                                                <from>'Generating charging identifiers for LTE creation/update'</from>
                                            </sxt:log>
                                        </sxt:trace>
                                        <assign name="AssignGetSIMIMSPrivateIdForLTE">
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:TxId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:OriginatingIdentity</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:OriginatingIP</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:Tenant</to>
                                            </copy>
                                            <copy>
                                                <from>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'IntegratedCircuitCardIdentifier')</from>
                                                <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:IntegratedCircuitCardIdentifier</to>
                                            </copy>
                                        </assign>
                                        <invoke name="GetLTEIMSPrivateIdentity" partnerLink="IM" operation="GetIMSPrivateIdentity" xmlns:tns="http://xml.smilecoms.com/IM" portType="tns:IMSoap" inputVariable="IMGetIMSPrivateIdentityIn" outputVariable="IMGetIMSPrivateIdentityOut">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>concat('Need to get END_USER_PRIVATE for this ICCID. Doing IMSPrivate Identity Query on IM with ICCID: ', $IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:IntegratedCircuitCardIdentifier)</from>
                                                </sxt:log>
                                            </sxt:trace>   
                                        </invoke>
                                        <assign name="AssignLTEChargingIdentifier">
                                            <copy>
                                                <from>true()</from>
                                                <to variable="MustAddChargingIdentifiers"/>
                                            </copy>
                                            <copy>
                                                <from>'END_USER_PRIVATE'</from>
                                                <to>$ChargingIdentifiers/ChargingIdentifiers[1]/IdentifierType</to>
                                            </copy>
                                            <copy>
                                                <from>$IMGetIMSPrivateIdentityOut.IMSPrivateIdentity/ns6:Identity</from>
                                                <to>$ChargingIdentifiers/ChargingIdentifiers[1]/Identifier</to>
                                            </copy>
                                        </assign>
                                    </sequence>
                                </if>
                            </sequence>
                            <!-- END - This is an LTE service -->
                            
                            <!-- START - This is a Voice service -->
                            <elseif>
                                <condition>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'ProvisioningFlow') = 'voice'</condition>
                                <sequence name="Voice">
                                    <sxt:trace>
                                        <sxt:log level="finest" location="onStart">
                                            <from>'ProvisioningFlow is voice'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                    <if name="If_Voice_CUD">
                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create'</condition>
                                        <scope name="CS_VoiceCreation">
                                            <variables>
                                                <variable name="SubFlowProvisionVoiceServiceOut" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionServiceResponse"/>
                                                <variable name="SubFlowProvisionVoiceServiceIn" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionVoiceServiceRequest"/>
                                            </variables>
                                            <sequence name="Voice_Create">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onStart">
                                                        <from>'In Provisioning for voice service'</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                                <assign name="AssignVoiceData">
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                        <to>$SubFlowProvisionVoiceServiceIn.VoiceServiceData/SubFlowContext/TxId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                        <to>$SubFlowProvisionVoiceServiceIn.VoiceServiceData/SubFlowContext/OriginatingIdentity</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                        <to>$SubFlowProvisionVoiceServiceIn.VoiceServiceData/SubFlowContext/OriginatingIP</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                        <to>$SubFlowProvisionVoiceServiceIn.VoiceServiceData/SubFlowContext/Tenant</to>
                                                    </copy>
                                                </assign>
                                                <forEach name="ForEachAVP" parallel="no" counterName="avp">
                                                    <startCounterValue>1</startCounterValue>
                                                    <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                                    <scope name="Scope61">
                                                        <assign name="AssignAttributeAndValue">
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute</from>
                                                                <to>$SubFlowProvisionVoiceServiceIn.VoiceServiceData/ServiceAVPs[$avp]/ns0:Attribute</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value</from>
                                                                <to>$SubFlowProvisionVoiceServiceIn.VoiceServiceData/ServiceAVPs[$avp]/ns0:Value</to>
                                                            </copy>
                                                        </assign>
                                                    </scope>
                                                </forEach>
                                                <invoke name="ProvisionVoice" partnerLink="SCASubFlows" operation="ProvisionVoiceService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowProvisionVoiceServiceIn" outputVariable="SubFlowProvisionVoiceServiceOut"/>
                                                <assign name="AssignVoiceResults">
                                                    <copy>
                                                        <from>$SubFlowProvisionVoiceServiceOut.ProvisionedServiceData/ResourceId</from>
                                                        <to variable="RemoteResourceId"/>
                                                    </copy>                                                    
                                                </assign>
                                            </sequence>
                                        </scope>
                                        <elseif>
                                            <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'delete'</condition>
                                            <sequence name="Voice_Delete">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onStart">
                                                        <from>'In deletion of voice service'</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                                <assign name="AssignGetRemoteResourceIdForVoice">
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:ServiceInstanceId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:TxId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIP</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:Tenant</to>
                                                    </copy>
                                                    <copy>
                                                        <from>'MAIN'</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:Verbosity</to>
                                                    </copy>
                                                </assign>
                                                <invoke name="GetRemoteResourceIdForVoice" partnerLink="CM" operation="GetServiceInstances" portType="ns5:CMSoap" inputVariable="CMGetServiceInstancesIn" outputVariable="CMGetServiceInstancesOut"/>
                                                <assign name="AssignDeleteVoice">
                                                    <copy>
                                                        <from>$CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances[1]/ns1:RemoteResourceId</from>
                                                        <to>$SubFlowDeleteVoiceServiceIn.VoiceServiceDeletionInfo/RemoteResourceId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                        <to>$SubFlowDeleteVoiceServiceIn.VoiceServiceDeletionInfo/SubFlowContext/TxId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                        <to>$SubFlowDeleteVoiceServiceIn.VoiceServiceDeletionInfo/SubFlowContext/OriginatingIdentity</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                        <to>$SubFlowDeleteVoiceServiceIn.VoiceServiceDeletionInfo/SubFlowContext/OriginatingIP</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                        <to>$SubFlowDeleteVoiceServiceIn.VoiceServiceDeletionInfo/SubFlowContext/Tenant</to>
                                                    </copy>
                                                </assign>
                                                <invoke name="DeleteVoice" partnerLink="SCASubFlows" operation="DeleteVoiceService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowDeleteVoiceServiceIn" outputVariable="SubFlowDeleteVoiceServiceOut"/>
                                                <assign name="UseDeleteVoiceResult">
                                                    <copy>
                                                        <from>$SubFlowDeleteVoiceServiceOut.Done/Done</from>
                                                        <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                                                    </copy>
                                                </assign>
                                            </sequence>
                                        </elseif>
                                        <elseif>
                                            <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                            <scope name="CS_VoiceUpdate">
                                                <variables>
                                                    <variable name="SubFlowModifyVoiceServiceOut" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionServiceResponse"/>
                                                    <variable name="SubFlowModifyVoiceServiceIn" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ModifyVoiceServiceRequest"/>
                                                </variables>
                                                <sequence name="Voice_Modify">
                                                    <sxt:trace>
                                                        <sxt:log level="finest" location="onStart">
                                                            <from>'In modify for voice service'</from>
                                                        </sxt:log>
                                                    </sxt:trace>
                                                    <assign name="AssignModifiedVoiceData">
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                            <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/SubFlowContext/TxId</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                            <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/SubFlowContext/OriginatingIdentity</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                            <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/SubFlowContext/OriginatingIP</to>
                                                        </copy>
                                                        <copy ignoreMissingFromData="yes">
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                            <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/SubFlowContext/Tenant</to>
                                                        </copy>
                                                    </assign>
                                                    <forEach name="ForEachAVP" parallel="no" counterName="avp">
                                                        <startCounterValue>1</startCounterValue>
                                                        <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                                        <scope name="Scope611">
                                                            <assign name="AssignModifiedAttributeAndValue">
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute</from>
                                                                    <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/ServiceAVPs[$avp]/ns0:Attribute</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value</from>
                                                                    <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/ServiceAVPs[$avp]/ns0:Value</to>
                                                                </copy>
                                                            </assign>
                                                        </scope>
                                                    </forEach>
                                                    <assign name="AssignAttributeForPhoneNumberChange">
                                                        <copy>
                                                            <from>$MustVerifyPhoneNumber</from>
                                                            <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 1]/ns0:Value</to>
                                                        </copy>
                                                        <copy>
                                                            <from>'IMPUChanged'</from>
                                                            <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 1]/ns0:Attribute</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$OriginalPublicIdentity</from>
                                                            <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 2]/ns0:Value</to>
                                                        </copy>
                                                        <copy>
                                                            <from>'OriginalPublicIdentity'</from>
                                                            <to>$SubFlowModifyVoiceServiceIn.ModifiedVoiceServiceData/ServiceAVPs[count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs) + 2]/ns0:Attribute</to>
                                                        </copy>
                                                    </assign>
                                                    <invoke name="ModifyVoice" partnerLink="SCASubFlows" operation="ModifyVoiceService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowModifyVoiceServiceIn" outputVariable="SubFlowModifyVoiceServiceOut"/>
                                                    <assign name="AssignModifyVoiceResults">
                                                        <copy>
                                                            <from>$SubFlowModifyVoiceServiceOut.ProvisionedServiceData/ResourceId</from>
                                                            <to variable="RemoteResourceId"/>
                                                        </copy>                                                    
                                                    </assign>
                                                </sequence>
                                            </scope>
                                        </elseif>
                                    </if>
                                    <if name="If_Voice_CU">
                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create' or $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                        <sequence name="Voice_Create_Or_Update">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>'Generating charging identifiers for Voice creation/update'</from>
                                                </sxt:log>
                                            </sxt:trace>
                                            <assign name="AssignGetSIMIMSPrivateId">
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:Tenant</to>
                                                </copy>
                                                <copy>
                                                    <from>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'IntegratedCircuitCardIdentifier')</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:IntegratedCircuitCardIdentifier</to>
                                                </copy>
                                            </assign>
                                            <invoke name="GetSIMIMSPrivateIdentity" partnerLink="IM" operation="GetIMSPrivateIdentity" xmlns:tns="http://xml.smilecoms.com/IM" portType="tns:IMSoap" inputVariable="IMGetIMSPrivateIdentityIn" outputVariable="IMGetIMSPrivateIdentityOut">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onStart">
                                                        <from>concat('Need to get END_USER_PRIVATE for this ICCID. Doing IMSPrivate Identity Query on IM with ICCID: ', $IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:IntegratedCircuitCardIdentifier)</from>
                                                    </sxt:log>
                                                </sxt:trace>   
                                            </invoke>
                                            <assign name="AssignVoiceChargingIdentifier">
                                                <copy>
                                                    <from>true()</from>
                                                    <to variable="MustAddChargingIdentifiers"/>
                                                </copy>
                                                <copy>
                                                    <from>'END_USER_SIP_URI'</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[1]/IdentifierType</to>
                                                </copy>
                                                <copy>
                                                    <from>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'PublicIdentity')</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[1]/Identifier</to>
                                                </copy>
                                                <copy>
                                                    <from>'END_USER_PRIVATE'</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[2]/IdentifierType</to>
                                                </copy>
                                                <copy>
                                                    <from>$IMGetIMSPrivateIdentityOut.IMSPrivateIdentity/ns6:Identity</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[2]/Identifier</to>
                                                </copy>
                                                <copy>
                                                    <from>'END_USER_E164'</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[3]/IdentifierType</to>
                                                </copy>
                                                <copy>
                                                    <from>concat('tel:', substring-before(substring-after(BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'PublicIdentity'), ':'), '@'))</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[3]/Identifier</to>
                                                </copy>
                                            </assign>
                                        </sequence>
                                    </if>
                                </sequence>
                            </elseif>
                            <!-- END - This is a Voice service -->
                            
                            
                            <!-- START - This is a Data service -->
                            <elseif>
                                <condition>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'ProvisioningFlow') = 'data'</condition>
                                <sequence name="Data">
                                    <sxt:trace>
                                        <sxt:log level="finest" location="onStart">
                                            <from>'ProvisioningFlow is data'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                    <if name="If_Data_CUD">
                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create' or $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                        <sequence name="Data_Create_Or_Update">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>'Generating charging identifiers for data creation/update'</from>
                                                </sxt:log>
                                            </sxt:trace>
                                            <assign name="AssignGetIMPI">
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:PlatformContext/ns6:Tenant</to>
                                                </copy>
                                                <copy>
                                                    <from>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'IntegratedCircuitCardIdentifier')</from>
                                                    <to>$IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:IntegratedCircuitCardIdentifier</to>
                                                </copy>
                                            </assign>
                                            <invoke name="GetDataIMPIUsingLTEICCID" partnerLink="IM" operation="GetIMSPrivateIdentity" xmlns:tns="http://xml.smilecoms.com/IM" portType="tns:IMSoap" inputVariable="IMGetIMSPrivateIdentityIn" outputVariable="IMGetIMSPrivateIdentityOut">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onStart">
                                                        <from>concat('Need to get END_USER_PRIVATE for this ICCID. Doing IMSPrivate Identity Query on IM with ICCID: ', $IMGetIMSPrivateIdentityIn.IMSPrivateIdentityQuery/ns6:IntegratedCircuitCardIdentifier)</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                            </invoke>
                                            <assign name="AssignDataChargingIdentifier">
                                                <copy>
                                                    <from>true()</from>
                                                    <to variable="MustAddChargingIdentifiers"/>
                                                </copy>
                                                <copy>
                                                    <from>'END_USER_PRIVATE'</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers/IdentifierType</to>
                                                </copy>
                                                <copy>
                                                    <from>$IMGetIMSPrivateIdentityOut.IMSPrivateIdentity/ns6:Identity</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers/Identifier</to>
                                                </copy>
                                            </assign>
                                        </sequence>
                                    </if>
                                </sequence>
                            </elseif>
                            <!-- END - This is a Data service -->
                            
                            
                            <!-- START - This is a WiFi service -->
                            <elseif>
                                <condition>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'ProvisioningFlow') = 'wifi'</condition>
                                <sequence name="Wifi">
                                    <sxt:trace>
                                        <sxt:log level="finest" location="onStart">
                                            <from>'ProvisioningFlow is wifi'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                    <if name="If_Wifi_CUD">
                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create'</condition>
                                        <scope name="CS_WIFICreation">
                                            <variables>
                                                <variable name="SubFlowProvisionWLANServiceOut" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionServiceResponse"/>
                                                <variable name="SubFlowProvisionWLANServiceIn" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionWLANServiceRequest"/>
                                            </variables>
                                            <sequence name="Wifi_Create">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onStart">
                                                        <from>'In Provisioning for WIFI service'</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                                <assign name="AssignWLANServiceData">
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                        <to>$SubFlowProvisionWLANServiceIn.WLANServiceData/SubFlowContext/TxId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                        <to>$SubFlowProvisionWLANServiceIn.WLANServiceData/SubFlowContext/OriginatingIdentity</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                        <to>$SubFlowProvisionWLANServiceIn.WLANServiceData/SubFlowContext/OriginatingIP</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                        <to>$SubFlowProvisionWLANServiceIn.WLANServiceData/SubFlowContext/Tenant</to>
                                                    </copy>
                                                </assign>
                                                <forEach name="ForEachAVP" parallel="no" counterName="avp">
                                                    <startCounterValue>1</startCounterValue>
                                                    <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                                    <scope name="ScopeWlanSDAvps">
                                                        <assign name="AssignAttributeAndValue">
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute</from>
                                                                <to>$SubFlowProvisionWLANServiceIn.WLANServiceData/ServiceAVPs[$avp]/ns0:Attribute</to>
                                                            </copy>
                                                            <copy>
                                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value</from>
                                                                <to>$SubFlowProvisionWLANServiceIn.WLANServiceData/ServiceAVPs[$avp]/ns0:Value</to>
                                                            </copy>
                                                        </assign>
                                                    </scope>
                                                </forEach>
                                                <invoke name="ProvisionWLAN" partnerLink="SCASubFlows" operation="ProvisionWLANService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowProvisionWLANServiceIn" outputVariable="SubFlowProvisionWLANServiceOut"/>
                                                <assign name="AssignWLANResults">
                                                    <copy>
                                                        <from>$SubFlowProvisionWLANServiceOut.ProvisionedServiceData/ResourceId</from>
                                                        <to variable="RemoteResourceId"/>
                                                    </copy>                                                    
                                                </assign>
                                            </sequence>
                                        </scope>
                                        <elseif>
                                            <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'delete'</condition>
                                            <sequence name="Wifi_Delete">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onStart">
                                                        <from>'In deletion of wifi service'</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                                <assign name="AssignGetRemoteResourceIdForWLAN">
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:ServiceInstanceId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:TxId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIP</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:Tenant</to>
                                                    </copy>
                                                    <copy>
                                                        <from>'MAIN'</from>
                                                        <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:Verbosity</to>
                                                    </copy>
                                                </assign>
                                                <invoke name="GetRemoteResourceIdForWlan" partnerLink="CM" operation="GetServiceInstances" portType="ns5:CMSoap" inputVariable="CMGetServiceInstancesIn" outputVariable="CMGetServiceInstancesOut"/>
                                                <assign name="AssignDeleteWLAN">
                                                    <copy>
                                                        <from>$CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances[1]/ns1:RemoteResourceId</from>
                                                        <to>$SubFlowDeleteWLANServiceIn.WLANServiceDeletionInfo/RemoteResourceId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                        <to>$SubFlowDeleteWLANServiceIn.WLANServiceDeletionInfo/SubFlowContext/TxId</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                        <to>$SubFlowDeleteWLANServiceIn.WLANServiceDeletionInfo/SubFlowContext/OriginatingIdentity</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                        <to>$SubFlowDeleteWLANServiceIn.WLANServiceDeletionInfo/SubFlowContext/OriginatingIP</to>
                                                    </copy>
                                                    <copy ignoreMissingFromData="yes">
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                        <to>$SubFlowDeleteWLANServiceIn.WLANServiceDeletionInfo/SubFlowContext/Tenant</to>
                                                    </copy>
                                                </assign>
                                                <invoke name="DeleteWLAN" partnerLink="SCASubFlows" operation="DeleteWLANService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowDeleteWLANServiceIn" outputVariable="SubFlowDeleteWLANServiceOut"/>
                                                <assign name="UseDeleteWLANResult">
                                                    <copy>
                                                        <from>$SubFlowDeleteWLANServiceOut.Done/Done</from>
                                                        <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                                                    </copy>
                                                </assign>
                                            </sequence>
                                        </elseif>
                                        <elseif>
                                            <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                            <scope name="CS_WifiUpdate">
                                                <variables>
                                                    <variable name="SubFlowModifyWLANServiceOut" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ProvisionServiceResponse"/>
                                                    <variable name="SubFlowModifyWLANServiceIn" xmlns:tns="http://xml.smilecoms.com/SCASubFlows" messageType="tns:ModifyWLANServiceRequest"/>
                                                </variables>
                                                <sequence name="Wifi_Modify">
                                                    <sxt:trace>
                                                        <sxt:log level="finest" location="onStart">
                                                            <from>'In modify for wifi service'</from>
                                                        </sxt:log>
                                                    </sxt:trace>
                                                    <assign name="AssignModifiedWifiData">
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                            <to>$SubFlowModifyWLANServiceIn.ModifiedWLANServiceData/SubFlowContext/TxId</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                            <to>$SubFlowModifyWLANServiceIn.ModifiedWLANServiceData/SubFlowContext/OriginatingIdentity</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                            <to>$SubFlowModifyWLANServiceIn.ModifiedWLANServiceData/SubFlowContext/OriginatingIP</to>
                                                        </copy>
                                                        <copy ignoreMissingFromData="yes">
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                            <to>$SubFlowModifyWLANServiceIn.ModifiedWLANServiceData/SubFlowContext/Tenant</to>
                                                        </copy>
                                                    </assign>
                                                    <forEach name="ForEachAVP" parallel="no" counterName="avp">
                                                        <startCounterValue>1</startCounterValue>
                                                        <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                                        <scope name="ScopeWif_U_avp">
                                                            <assign name="AssignModifiedAttributeAndValue">
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute</from>
                                                                    <to>$SubFlowModifyWLANServiceIn.ModifiedWLANServiceData/ServiceAVPs[$avp]/ns0:Attribute</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value</from>
                                                                    <to>$SubFlowModifyWLANServiceIn.ModifiedWLANServiceData/ServiceAVPs[$avp]/ns0:Value</to>
                                                                </copy>
                                                            </assign>
                                                        </scope>
                                                    </forEach>
                                                    
                                                    <invoke name="ModifyWLAN" partnerLink="SCASubFlows" operation="ModifyWLANService" portType="ns3:SCASubFlowsSoap" inputVariable="SubFlowModifyWLANServiceIn" outputVariable="SubFlowModifyWLANServiceOut"/>
                                                    <assign name="AssignModifyWifiResults">
                                                        <copy>
                                                            <from>$SubFlowModifyWLANServiceOut.ProvisionedServiceData/ResourceId</from>
                                                            <to variable="RemoteResourceId"/>
                                                        </copy>                                                    
                                                    </assign>
                                                </sequence>
                                            </scope>
                                        </elseif>
                                    </if>
                                    <if name="If_Wifi_CU">
                                        <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create' or $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                        <sequence name="Wifi_Create_Or_Update">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onStart">
                                                    <from>'Generating charging identifiers for Wifi creation/update'</from>
                                                </sxt:log>
                                            </sxt:trace>
                                            <assign name="AssignWlanChargingIdentifier">
                                                <copy>
                                                    <from>true()</from>
                                                    <to variable="MustAddChargingIdentifiers"/>
                                                </copy>
                                                <!--copy>
                                                    <from>'WIFI_MAC'</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[1]/IdentifierType</to>
                                                </copy>
                                                <copy>
                                                    <from>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'WiFiMAC')</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[1]/Identifier</to>
                                                </copy-->
                                                <!--<copy>
                                                    <from>'WIFI_IP'</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[1]/IdentifierType</to>
                                                </copy>
                                                <copy>
                                                    <from>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'WiFiIP')</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[1]/Identifier</to>
                                                </copy>-->
                                                <copy>
                                                    <from>'END_USER_NAI'</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[1]/IdentifierType</to>
                                                </copy>
                                                <copy>
                                                    <from>BPELUtils:getAVPValueAsString($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance, 'NAIUsername')</from>
                                                    <to>$ChargingIdentifiers/ChargingIdentifiers[1]/Identifier</to>
                                                </copy>
                                            </assign>
                                        </sequence>
                                    </if>
                                </sequence>
                            </elseif>
                        </if>
                        <!-- END - Do something specific depending on the service type -->
                        
                        
                        <!-- START - Now that the implementation node of each service has been created/updated/deleted, we must create/update/delete CM -->
                        <if name="UpdateCMWithSIData">
                            <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'create'</condition>
                            <sequence name="Create">
                                <scope name="CS_CreateSI">
                                    <sequence name="Sequence25">
                                        <sxt:trace>
                                            <sxt:log level="finest" location="onStart">
                                                <from>concat('Creating SI in CM. Account Number is:', $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId)</from>
                                            </sxt:log>
                                        </sxt:trace>
                                        <assign name="AssignSIData">
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:PlatformContext/ns1:TxId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:PlatformContext/ns1:OriginatingIP</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:PlatformContext/ns1:Tenant</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceSpecificationId</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:ServiceSpecificationId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:CustomerId</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:CustomerId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:AccountId</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:Status</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:Status</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ProductInstanceId</from>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:ProductInstanceId</to>
                                            </copy>
                                            <copy>
                                                <from variable="RemoteResourceId"/>
                                                <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:RemoteResourceId</to>
                                            </copy>
                                        </assign>
                                        
                                        
                                        <forEach name="ForEachSIAVP" parallel="no" counterName="avp">
                                            <startCounterValue>1</startCounterValue>
                                            <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                            <scope name="ForEachInfoAVPScope">
                                                <assign name="AssignAttributeAndValue">
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute</from>
                                                        <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:AVPs[$avp]/ns1:Attribute</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value</from>
                                                        <to>$CMCreateServiceInstanceIn.NewServiceInstance/ns1:AVPs[$avp]/ns1:Value</to>
                                                    </copy>
                                                </assign>
                                            </scope>
                                        </forEach>
                                        
                                        
                                        
                                        <invoke name="CreateServiceInstance" partnerLink="CM" operation="CreateServiceInstance" xmlns:tns="http://xml.smilecoms.com/CM" portType="tns:CMSoap" inputVariable="CMCreateServiceInstanceIn" outputVariable="CMCreateServiceInstanceOut">
                                            <sxt:trace>
                                                <sxt:log level="finest" location="onComplete">
                                                    <from>concat('Created SI in CM. SIID is ', $CMCreateServiceInstanceOut.ServiceInstance/ns1:ServiceInstanceId)</from>
                                                </sxt:log>
                                            </sxt:trace>
                                        </invoke>
                                        <assign name="AssignNewSIId">
                                            <copy>
                                                <from>$CMCreateServiceInstanceOut.ServiceInstance/ns1:ServiceInstanceId</from>
                                                <to>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</to>
                                            </copy>
                                        </assign>
                                    </sequence>
                                </scope>
                            </sequence>
                            <elseif>
                                <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'update'</condition>
                                <sequence name="Update">
                                    <scope name="CS_UpdateSI">
                                        <variables>
                                            <variable name="BMModifyServiceInstanceAccountOut" messageType="ns4:Done"/>
                                            <variable name="BMModifyServiceInstanceAccountIn" messageType="ns4:ModifyServiceInstanceAccountRequest"/>
                                            <variable name="CMUpdateServiceInstanceOut" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:UpdateServiceInstanceResponse"/>
                                            <variable name="CMUpdateServiceInstanceIn" xmlns:tns="http://xml.smilecoms.com/CM" messageType="tns:UpdateServiceInstanceRequest"/>
                                        </variables>
                                        <sequence name="Sequence28">
                                            <assign name="AssignSIUpdate">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onStart">
                                                        <from>'Updating SI in CM'</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:PlatformContext/ns1:TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:PlatformContext/ns1:OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:PlatformContext/ns1:Tenant</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:ServiceInstanceId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:CustomerId</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:CustomerId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:AccountId</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:Status</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:Status</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceSpecificationId</from>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:ServiceSpecificationId</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from variable="RemoteResourceId"/>
                                                    <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:RemoteResourceId</to>
                                                </copy>
                                            </assign>
                                            <forEach name="ForEachSIAVPToUpdate" parallel="no" counterName="avp">
                                                <startCounterValue>1</startCounterValue>
                                                <finalCounterValue>count($SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs)</finalCounterValue>
                                                <scope name="ForEachInfoAVPScopeForUpdate">
                                                    <assign name="AssignAttributeAndValueForUpdate">
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Attribute</from>
                                                            <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:AVPs[$avp]/ns1:Attribute</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AVPs[$avp]/ns0:Value</from>
                                                            <to>$CMUpdateServiceInstanceIn.ServiceInstance/ns1:AVPs[$avp]/ns1:Value</to>
                                                        </copy>
                                                    </assign>
                                                </scope>
                                            </forEach>
                                            <assign name="AssignBM_Account_Change">
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$BMModifyServiceInstanceAccountIn.ModifyServiceInstanceAccountRequest/ns2:PlatformContext/ns2:TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$BMModifyServiceInstanceAccountIn.ModifyServiceInstanceAccountRequest/ns2:PlatformContext/ns2:OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$BMModifyServiceInstanceAccountIn.ModifyServiceInstanceAccountRequest/ns2:PlatformContext/ns2:OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$BMModifyServiceInstanceAccountIn.ModifyServiceInstanceAccountRequest/ns2:PlatformContext/ns2:Tenant</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:AccountId</from>
                                                    <to>$BMModifyServiceInstanceAccountIn.ModifyServiceInstanceAccountRequest/ns2:AccountId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                    <to>$BMModifyServiceInstanceAccountIn.ModifyServiceInstanceAccountRequest/ns2:ServiceInstanceId</to>
                                                </copy>
                                            </assign>
                                            <invoke name="UpdateSI" partnerLink="CM" operation="UpdateServiceInstance" xmlns:tns="http://xml.smilecoms.com/CM" portType="tns:CMSoap" inputVariable="CMUpdateServiceInstanceIn" outputVariable="CMUpdateServiceInstanceOut"/>
                                            <assign name="Use_UpdateSI_Result">
                                                <copy>
                                                    <from>$CMUpdateServiceInstanceOut.Done/ns1:Done</from>
                                                    <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                                                </copy>
                                            </assign>
                                            <invoke name="ChangeSIAccount" partnerLink="BM" operation="ModifyServiceInstanceAccount" portType="ns4:BMSoap" inputVariable="BMModifyServiceInstanceAccountIn" outputVariable="BMModifyServiceInstanceAccountOut">
                                                <sxt:trace>
                                                    <sxt:log level="finest" location="onStart">
                                                        <from>'Updating the services instances account number on all non expired unit credits'</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                            </invoke>
                                            <assign name="Use_UpdateAcc_Result">
                                                <copy>
                                                    <from>$BMModifyServiceInstanceAccountOut.Done/ns2:Done</from>
                                                    <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                                                </copy>
                                            </assign>
                                        </sequence>
                                    </scope>
                                </sequence>
                            </elseif>
                            <elseif>
                                <condition>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:Action = 'delete'</condition>
                                <sequence name="Delete">
                                    <sxt:trace>
                                        <sxt:log level="finest" location="onStart">
                                            <from>'Action is delete. Deleting mappings in BM and SI in CM'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                    <scope name="CS_DeleteSI">
                                        <variables>
                                            <variable name="SCACallingTransferBalanceOut" messageType="tns:TransferBalanceResponse"/>
                                            <variable name="SCACallingTransferBalanceIn" messageType="tns:TransferBalanceRequest"/>
                                            <variable name="CMGetServiceInstancesOut" messageType="ns5:ServiceInstancesResponse"/>
                                            <variable name="CMGetServiceInstancesIn" messageType="ns5:GetServiceInstancesRequest"/>
                                            <variable name="BMGetAccountsOut" messageType="ns4:GetAccountsResponse"/>
                                            <variable name="BMGetAccountsIn" messageType="ns4:GetAccountsRequest"/>
                                            <variable name="BMDeleteServiceInstanceMappingsOut" messageType="ns4:Done"/>
                                            <variable name="BMDeleteServiceInstanceMappingsIn" messageType="ns4:DeleteServiceInstanceMappingsRequest"/>
                                            <variable name="CMDeleteServiceInstanceOut" messageType="ns5:Done"/>
                                            <variable name="CMDeleteServiceInstanceIn" messageType="ns5:DeleteServiceInstanceRequest"/>
                                        </variables>
                                        <sequence name="Sequence30">
                                            <assign name="AssignGetSI">
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:PlatformContext/ns1:Tenant</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:ServiceInstanceId</to>
                                                </copy>
                                                <copy>
                                                    <from>'MAIN'</from>
                                                    <to>$CMGetServiceInstancesIn.ServiceInstanceQuery/ns1:Verbosity</to>
                                                </copy>
                                            </assign>
                                            <invoke name="GetSI" partnerLink="CM" operation="GetServiceInstances" portType="ns5:CMSoap" inputVariable="CMGetServiceInstancesIn" outputVariable="CMGetServiceInstancesOut"/>
                                            <if name="IfSalesService">
                                                <condition>$CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances/ns1:ServiceSpecificationId = 1000 or $CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances/ns1:ServiceSpecificationId = 1002 or $CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances/ns1:ServiceSpecificationId = 1004</condition>
                                                <sequence name="Sequence411">
                                                    <assign name="AssignGetBalance">
                                                        <copy>
                                                            <from>$CMGetServiceInstancesOut.ServiceInstanceList/ns1:ServiceInstances/ns1:AccountId</from>
                                                            <to>$BMGetAccountsIn.AccountQuery/ns2:AccountId</to>
                                                        </copy>
                                                        <copy>
                                                            <from>'MAIN'</from>
                                                            <to>$BMGetAccountsIn.AccountQuery/ns2:Verbosity</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                            <to>$BMGetAccountsIn.AccountQuery/ns2:PlatformContext/ns2:TxId</to>
                                                        </copy>
                                                        <copy>
                                                            <from>'admin'</from>
                                                            <to>$BMGetAccountsIn.AccountQuery/ns2:PlatformContext/ns2:OriginatingIdentity</to>
                                                        </copy>
                                                        <copy>
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                            <to>$BMGetAccountsIn.AccountQuery/ns2:PlatformContext/ns2:OriginatingIP</to>
                                                        </copy>
                                                        <copy ignoreMissingFromData="yes">
                                                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                            <to>$BMGetAccountsIn.AccountQuery/ns2:PlatformContext/ns2:Tenant</to>
                                                        </copy>
                                                    </assign>
                                                    <invoke name="GetBalance" partnerLink="BM" operation="GetAccounts" portType="ns4:BMSoap" inputVariable="BMGetAccountsIn" outputVariable="BMGetAccountsOut"/>
                                                    <if name="IfHasBalance">
                                                        <condition>$BMGetAccountsOut.AccountList/ns2:Accounts/ns2:CurrentBalanceInCents &gt; 0</condition>
                                                        <sequence name="Sequence1301">
                                                            <assign name="AssignTransfer">
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:SCAContext/ns0:TxId</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:SCAContext/ns0:OriginatingIP</to>
                                                                </copy>
                                                                <copy ignoreMissingFromData="yes">
                                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:SCAContext/ns0:Tenant</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$BMGetAccountsOut.AccountList/ns2:Accounts/ns2:AccountId</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:SourceAccountId</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>1000000005</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:TargetAccountId</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$BMGetAccountsOut.AccountList/ns2:Accounts/ns2:CurrentBalanceInCents</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:AmountInCents</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'Remove funds due to sales service deletion'</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:Description</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'transferBalance'</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:SCAContext/ns0:Method</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'Administrator'</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:SCAContext/ns0:Roles</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>'admin'</from>
                                                                    <to>$SCACallingTransferBalanceIn.BalanceTransferData/ns0:SCAContext/ns0:OriginatingIdentity</to>
                                                                </copy>
                                                            </assign>
                                                            <invoke name="Transfer" partnerLink="SCACalling" operation="TransferBalance" portType="tns:SCASoap" inputVariable="SCACallingTransferBalanceIn" outputVariable="SCACallingTransferBalanceOut">
                                                                <sxt:trace>
                                                                    <sxt:log level="finest" location="onStart">
                                                                        <from>'Transferring amount out of the account into 1000000005 as the service is a sales service and is being deleted'</from>
                                                                    </sxt:log>
                                                                </sxt:trace>
                                                            </invoke>
                                                        </sequence>
                                                    </if>
                                                </sequence>
                                            </if>
                                            <assign name="AssignDeleteMappings">
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                    <to>$BMDeleteServiceInstanceMappingsIn.ServiceInstanceMappingListToDelete/ns2:ServiceInstanceId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$BMDeleteServiceInstanceMappingsIn.ServiceInstanceMappingListToDelete/ns2:PlatformContext/ns2:TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$BMDeleteServiceInstanceMappingsIn.ServiceInstanceMappingListToDelete/ns2:PlatformContext/ns2:OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$BMDeleteServiceInstanceMappingsIn.ServiceInstanceMappingListToDelete/ns2:PlatformContext/ns2:OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$BMDeleteServiceInstanceMappingsIn.ServiceInstanceMappingListToDelete/ns2:PlatformContext/ns2:Tenant</to>
                                                </copy>
                                            </assign>
                                            <invoke name="DeleteAllMappings" partnerLink="BM" operation="DeleteServiceInstanceMappings" portType="ns4:BMSoap" inputVariable="BMDeleteServiceInstanceMappingsIn" outputVariable="BMDeleteServiceInstanceMappingsOut"/>
                                            <assign name="Use_DeleteMappings_Result">
                                                <copy>
                                                    <from>$BMDeleteServiceInstanceMappingsOut.Done/ns2:Done</from>
                                                    <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                                                </copy>
                                            </assign>
                                            <assign name="AssignDeleteSI">
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                    <to>$CMDeleteServiceInstanceIn.ServiceInstanceIdToDelete/ns1:Integer</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                    <to>$CMDeleteServiceInstanceIn.ServiceInstanceIdToDelete/ns1:PlatformContext/ns1:TxId</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                    <to>$CMDeleteServiceInstanceIn.ServiceInstanceIdToDelete/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                                                </copy>
                                                <copy>
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                    <to>$CMDeleteServiceInstanceIn.ServiceInstanceIdToDelete/ns1:PlatformContext/ns1:OriginatingIP</to>
                                                </copy>
                                                <copy ignoreMissingFromData="yes">
                                                    <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                    <to>$CMDeleteServiceInstanceIn.ServiceInstanceIdToDelete/ns1:PlatformContext/ns1:Tenant</to>
                                                </copy>
                                            </assign>
                                            <invoke name="DeleteServiceInstance" partnerLink="CM" operation="DeleteServiceInstance" portType="ns5:CMSoap" inputVariable="CMDeleteServiceInstanceIn" outputVariable="CMDeleteServiceInstanceOut"/>
                                            <assign name="Use_Delete_Result">
                                                <copy>
                                                    <from>$CMDeleteServiceInstanceOut.Done/ns1:Done</from>
                                                    <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                                                </copy>
                                            </assign>
                                        </sequence>
                                    </scope>
                                </sequence>
                            </elseif>
                        </if>
                        <!-- END - Now that the implementation node of each service has been created/updated/deleted, we must create/update/delete CM -->
                        
                        
                        
                        
                        
                        <!-- START - Now BM needs to know about the identifiers that the implementation nodes could use for charging. BM must map these to the SI -->
                        <if name="IfMustAddChargingIdentifiers">
                            <condition>$MustAddChargingIdentifiers and $SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders/ns0:ServiceInstance/ns0:Status != 'DE'</condition>
                            <sequence name="Sequence13">
                                <sxt:trace>
                                    <sxt:log level="finest" location="onStart">
                                        <from>'Adding charging identifiers'</from>
                                    </sxt:log>
                                </sxt:trace>
                                <scope name="CS_ChargingMapping">
                                    <variables>
                                        <variable name="BMAddServiceInstanceMappingsOut" xmlns:tns="http://xml.smilecoms.com/BM" messageType="tns:Done"/>
                                        <variable name="BMAddServiceInstanceMappingsIn" xmlns:tns="http://xml.smilecoms.com/BM" messageType="tns:AddServiceInstanceMappingsRequest"/>
                                    </variables>
                                    <sequence name="Sequence22">
                                        <forEach name="ForEachMapping" parallel="no" counterName="chargingIdentifier">
                                            <startCounterValue>1</startCounterValue>
                                            <finalCounterValue>count($ChargingIdentifiers/ChargingIdentifiers)</finalCounterValue>
                                            <scope name="Scope1">
                                                <assign name="AssignMapping">
                                                    <copy>
                                                        <from>$ChargingIdentifiers/ChargingIdentifiers[$chargingIdentifier]/Identifier</from>
                                                        <to>$BMAddServiceInstanceMappingsIn.ServiceInstanceMappingList/ns2:ServiceInstanceMappings[$chargingIdentifier]/ns2:Identifier</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$ChargingIdentifiers/ChargingIdentifiers[$chargingIdentifier]/IdentifierType</from>
                                                        <to>$BMAddServiceInstanceMappingsIn.ServiceInstanceMappingList/ns2:ServiceInstanceMappings[$chargingIdentifier]/ns2:IdentifierType</to>
                                                    </copy>
                                                </assign>
                                            </scope>
                                        </forEach>
                                        <assign name="AssignBM">
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:ServiceInstanceOrders[$SICounter]/ns0:ServiceInstance/ns0:ServiceInstanceId</from>
                                                <to>$BMAddServiceInstanceMappingsIn.ServiceInstanceMappingList/ns2:ServiceInstanceId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                                <to>$BMAddServiceInstanceMappingsIn.ServiceInstanceMappingList/ns2:PlatformContext/ns2:TxId</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                                <to>$BMAddServiceInstanceMappingsIn.ServiceInstanceMappingList/ns2:PlatformContext/ns2:OriginatingIdentity</to>
                                            </copy>
                                            <copy>
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                                <to>$BMAddServiceInstanceMappingsIn.ServiceInstanceMappingList/ns2:PlatformContext/ns2:OriginatingIP</to>
                                            </copy>
                                            <copy ignoreMissingFromData="yes">
                                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                                <to>$BMAddServiceInstanceMappingsIn.ServiceInstanceMappingList/ns2:PlatformContext/ns2:Tenant</to>
                                            </copy>
                                        </assign>
                                        <invoke name="AddBMMapping" partnerLink="BM" operation="AddServiceInstanceMappings" xmlns:tns="http://xml.smilecoms.com/BM" portType="tns:BMSoap" inputVariable="BMAddServiceInstanceMappingsIn" outputVariable="BMAddServiceInstanceMappingsOut"/>
                                        <assign name="Assign_Mapping_Result">
                                            <copy>
                                                <from>$BMAddServiceInstanceMappingsOut.Done/ns2:Done</from>
                                                <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                                            </copy>
                                        </assign>
                                    </sequence>
                                </scope>
                            </sequence>
                        </if>
                        <!-- END - Now BM needs to know about the identifiers that the implementation nodes could use for charging. BM must map these to the SI -->
                        
                        
                    </sequence>
                </scope>
            </forEach> <!-- End looping through each SI -->
        </sequence>
        <!-- END - Deal with the service instances. Loop though each and decide how to create/update/delete it -->
        
        
        
        
        
        
        <!-- START - Now that Services have been dealt with, if this was a deletion, we can now delete the product instance -->
        <sequence name="ProductInstanceMustBeDeleted">
            <if name="IfProductInstanceMustBeDeleted">
                <condition>$SCAProcessOrderIn.ProductOrder/ns0:Action = 'delete'</condition>
                <sequence name="DeletionOfProductInstance">
                    <sxt:trace>
                        <sxt:log level="finest" location="onStart">
                            <from>'Deleting product instance'</from>
                        </sxt:log>
                    </sxt:trace>
                    <assign name="AssignDelete">
                        <copy>
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:ProductInstanceId</from>
                            <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:Integer</to>
                        </copy>
                        <copy>
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                            <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:PlatformContext/ns1:TxId</to>
                        </copy>
                        <copy>
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                            <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:PlatformContext/ns1:OriginatingIdentity</to>
                        </copy>
                        <copy>
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                            <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:PlatformContext/ns1:OriginatingIP</to>
                        </copy>
                        <copy ignoreMissingFromData="yes">
                            <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                            <to>$CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:PlatformContext/ns1:Tenant</to>
                        </copy>
                    </assign>
                    <invoke name="DeleteProductInstance" partnerLink="CM" xmlns:tns="http://xml.smilecoms.com/CM" operation="DeleteProductInstance" portType="tns:CMSoap" inputVariable="CMDeleteProductInstanceIn" outputVariable="CMDeleteProductInstanceOut">
                        <sxt:trace>
                            <sxt:log level="finest" location="onStart">
                                <from>concat('Deleting product instance with id ', $CMDeleteProductInstanceIn.ProductInstanceIdToDelete/ns1:Integer)</from>
                            </sxt:log>
                        </sxt:trace>
                    </invoke>
                    <assign name="UseResultOfDeletion">
                        <copy>
                            <from>$CMDeleteProductInstanceOut.Done/ns1:Done</from>
                            <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                        </copy>
                    </assign>
                </sequence>
            </if>
        </sequence>
        <!-- END - Now that Services have been dealt with, if this was a deletion, we can now delete the product instance -->
            
        
        
        
        <!-- START - Do post processing of the sale row the SIM was sold in -->
        <sequence name="SalePostProcessing">
            <scope name="SalePostProcessingScope">
                <variables>
                    <variable name="POSPostProcessSaleOut" xmlns:tns="http://xml.smilecoms.com/POS" messageType="tns:Done"/>
                    <variable name="POSPostProcessSaleIn" xmlns:tns="http://xml.smilecoms.com/POS" messageType="tns:PostProcessSaleRequest"/>
                </variables>
                <faultHandlers>
                    <catch faultVariable="POSErr" xmlns:tns="http://xml.smilecoms.com/POS" faultMessageType="tns:POSError">
                        <sequence name="Sequence406">
                            <assign name="SendError2">
                                <copy>
                                    <from>BPELUtils:sendTrapToOpsManagement(concat('Failed to post process a sale in ProcessOrder BPEL flow: ', $POSErr.POSError/ns7:ErrorDesc, ' ', $POSErr.POSError/ns7:ErrorType, ' ', $POSErr.POSError/ns7:ErrorCode))</from>
                                    <to variable="DummyString"/>
                                </copy>
                            </assign>
                        </sequence>
                    </catch>
                </faultHandlers>
                <if name="IfSaleNeedsPostProcessing">
                    <condition>$SIMSaleSaleId &gt; 0</condition>
                    <sequence name="Sequence405">
                        <assign name="AssignSalePostProcessing">
                            <sxt:trace>
                                <sxt:log level="finest" location="onStart">
                                    <from>concat('Going to do post processing on Sale ', $SIMSaleSaleId, ' by setting the account id to ', $DefaultAccountId, ' and product instance id to ', $SIMProductInstanceId)</from>
                                </sxt:log>
                            </sxt:trace>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:TxId</from>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:PlatformContext/ns7:TxId</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIdentity</from>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:PlatformContext/ns7:OriginatingIdentity</to>
                            </copy>
                            <copy>
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:OriginatingIP</from>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:PlatformContext/ns7:OriginatingIP</to>
                            </copy>
                            <copy ignoreMissingFromData="yes">
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Tenant</from>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:PlatformContext/ns7:Tenant</to>
                            </copy>
                            <copy>
                                <from variable="SIMSaleSaleId"/>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:SaleId</to>
                            </copy>
                            <copy>
                                <from variable="DefaultAccountId"/>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:AccountId</to>
                            </copy>
                            <copy>
                                <from variable="SIMProductInstanceId"/>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:ProductInstanceId</to>
                            </copy>
                            <copy>
                                <from variable="ICCID"/>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:SerialNumber</to>
                            </copy>
                            <copy ignoreMissingFromData="yes">
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:AllowPendingSIMSale</from>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:IgnoreStatus</to>
                            </copy>
                            <copy ignoreMissingFromData="yes">
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:KitItemNumber</from>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:KitItemNumber</to>
                            </copy>
                            <copy ignoreMissingFromData="yes">
                                <from>$SCAProcessOrderIn.ProductOrder/ns0:DeviceSerialNumber</from>
                                <to>$POSPostProcessSaleIn.SalePostProcessingData/ns7:DeviceSerialNumber</to>
                            </copy>
                        </assign>
                        <invoke name="DoSalePostProcessing" partnerLink="POS" operation="PostProcessSale" xmlns:tns="http://xml.smilecoms.com/POS" portType="tns:POSSoap" inputVariable="POSPostProcessSaleIn" outputVariable="POSPostProcessSaleOut"/>
                    </sequence>
                </if>
            </scope>
        </sequence>
        <!-- END - Do post processing of the sale the SIM was sold in -->
        
        
        
        
        
        <sequence name="Finalisation">
            <sxt:trace>
                <sxt:log level="finest" location="onStart">
                    <from>'All Done'</from>
                </sxt:log>
            </sxt:trace>
            <assign name="AssignDone">
                <copy>
                    <from>'true'</from>
                    <to>$SCAProcessOrderOut.Done/ns0:Done</to>
                </copy>
            </assign>
        </sequence>
        <if name="IfNotAsync">
            <condition>not($SCAProcessOrderIn.ProductOrder/ns0:SCAContext/ns0:Async)</condition>
            <sequence name="Sequence409">
                <reply name="Reply1" partnerLink="SCA" operation="ProcessOrder" portType="tns:SCASoap" variable="SCAProcessOrderOut"/>
            </sequence>
        </if>
        
    </sequence>
</process>
