<?xml version="1.0" encoding="UTF-8"?>
<process
    name="CopyIMTpAuthRulesToSCATpAuthRules"
    targetNamespace="http://xml.smilecoms.com/SCASubFlows"
    xmlns:tns="http://xml.smilecoms.com/SCASubFlows"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:sxt="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Trace" 
    xmlns:sxed="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Editor2"
    xmlns:sxat="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Attachment"
    xmlns:sxeh="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/ErrorHandling" xmlns:ns0="http://xml.smilecoms.com/schema/IM" xmlns:ns1="http://xml.smilecoms.com/schema/SCA" xmlns:ns2="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension" ns2:ignoreMissingFromData="yes">
    <import namespace="http://xml.smilecoms.com/SCASubFlows" location="../../wsdl/SCASubFlows.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/SCA" location="../../wsdl/SCAServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/IM" location="../Partners/IM/IMServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/CM" location="../Partners/CM/CMServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://xml.smilecoms.com/BM" location="../Partners/BM/BMServiceDefinition.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <partnerLinks>
        <partnerLink name="SCASubFlowsInvoke" partnerLinkType="tns:SCASubFlows" partnerRole="SCASubFlows"/>
        <partnerLink name="SCASubFlows" partnerLinkType="tns:SCASubFlows" myRole="SCASubFlows"/>
    </partnerLinks>
    <variables>
        <variable name="countAuthRuleSet" type="xs:int"/>
        <variable name="countAuthRule" type="xs:int"/>
        <variable name="SCACopyIMTpAuthRulesToSCATpAuthRulesOut" xmlns:tns="http://xml.smilecoms.com/SCA" messageType="tns:GetThirdPartyAuthorisationRulesResponse"/>
        <variable name="IMCopyIMTpAuthRulesToSCATpAuthRulesIn" xmlns:tns="http://xml.smilecoms.com/IM" messageType="tns:GetThirdPartyAuthorisationRulesResponse"/>
    </variables>
    <sequence>
        <receive name="Receive1" createInstance="yes" partnerLink="SCASubFlows" operation="CopyIMTpAuthRulesToSCATpAuthRules" portType="tns:SCASubFlowsSoap" variable="IMCopyIMTpAuthRulesToSCATpAuthRulesIn"/>
        <assign name="Assign1">
            <copy>
                <from>count($IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:ThirdPartyAuthorisationRuleSets)</from>
                <to variable="countAuthRuleSet"/>
            </copy>
            <copy>
                <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:PlatformContext/ns0:TxId</from>
                <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:SCAContext/ns1:TxId</to>
            </copy>
            <copy>
                <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:PlatformContext/ns0:OriginatingIdentity</from>
                <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:SCAContext/ns1:OriginatingIdentity</to>
            </copy>
            <copy>
                <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:PlatformContext/ns0:OriginatingIP</from>
                <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:SCAContext/ns1:OriginatingIP</to>
            </copy>
            <copy>
                <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:ThirdPartyId</from>
                <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:ThirdPartyId</to>
            </copy>
        </assign>
        <forEach name="ForEach_AuthRuleSet" parallel="no" counterName="idxAuthRuleSet">
            <startCounterValue>1</startCounterValue>
            <finalCounterValue>$countAuthRuleSet</finalCounterValue>
            <scope name="Scope1">
                <sequence name="Sequence1">
                    <assign name="Assign2">
                        <copy>
                            <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns0:RuleSetId</from>
                            <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns1:RuleSetId</to>
                        </copy>
                        <copy>
                            <from>count($IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns0:ThirdPartyAuthorisationRules)
                                
                            </from>
                            <to variable="countAuthRule"/>
                        </copy>
                    </assign>
                    <forEach name="ForEach_AuthRule" parallel="no" counterName="idxAuthRule">
                        <startCounterValue>1</startCounterValue>
                        <finalCounterValue>$countAuthRule</finalCounterValue>
                        <scope name="Scope2">
                            <assign name="Assign3">
                                <copy>
                                    <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns0:ThirdPartyAuthorisationRules[$idxAuthRule]/ns0:RuleId</from>
                                    <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns1:ThirdPartyAuthorisationRules[$idxAuthRule]/ns1:RuleId</to>
                                </copy>
                                <copy>
                                    <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns0:ThirdPartyAuthorisationRules[$idxAuthRule]/ns0:XQuery</from>
                                    <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns1:ThirdPartyAuthorisationRules[$idxAuthRule]/ns1:XQuery</to>
                                </copy>
                                <copy>
                                    <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns0:ThirdPartyAuthorisationRules[$idxAuthRule]/ns0:RegexMatch</from>
                                    <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns1:ThirdPartyAuthorisationRules[$idxAuthRule]/ns1:RegexMatch</to>
                                </copy>
                                <copy>
                                    <from>$IMCopyIMTpAuthRulesToSCATpAuthRulesIn.ThirdPartyAuthorisationRuleSetList/ns0:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns0:ThirdPartyAuthorisationRules[$idxAuthRule]/ns0:Description</from>
                                    <to>$SCACopyIMTpAuthRulesToSCATpAuthRulesOut.ThirdPartyAuthorisationRuleSetList/ns1:ThirdPartyAuthorisationRuleSets[$idxAuthRuleSet]/ns1:ThirdPartyAuthorisationRules[$idxAuthRule]/ns1:Description</to>
                                </copy>
                            </assign>
                        </scope>
                    </forEach>
                </sequence>
            </scope>
        </forEach>
        <reply name="Reply1" partnerLink="SCASubFlows" operation="CopyIMTpAuthRulesToSCATpAuthRules" portType="tns:SCASubFlowsSoap" variable="SCACopyIMTpAuthRulesToSCATpAuthRulesOut"/>
    </sequence>
</process>
